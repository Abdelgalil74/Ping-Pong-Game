
PING_PONG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00800060  00002c86  00002d1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008001ac  008001ac  00002e66  2**0
                  ALLOC
  3 .stab         00002e20  00000000  00000000  00002e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000156b  00000000  00000000  00005c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000071f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00007373  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00007546  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00009555  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000a6c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b6c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000b868  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000bb29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c3d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__vector_1>
       8:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__vector_2>
       c:	0c 94 26 11 	jmp	0x224c	; 0x224c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3b       	cpi	r26, 0xB5	; 181
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 26 13 	call	0x264c	; 0x264c <main>
      8a:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 2e 16 	jmp	0x2c5c	; 0x2c5c <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	ee 57       	subi	r30, 0x7E	; 126
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <CLCD_voidSendEnablePusle>:
#include "CLCD_private.h"



static void CLCD_voidSendEnablePusle(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2e 97       	sbiw	r28, 0x0e	; 14
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_u8PIN_HIGH);
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	62 e0       	ldi	r22, 0x02	; 2
     cee:	41 e0       	ldi	r20, 0x01	; 1
     cf0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	a0 e0       	ldi	r26, 0x00	; 0
     cfa:	b0 e4       	ldi	r27, 0x40	; 64
     cfc:	8b 87       	std	Y+11, r24	; 0x0b
     cfe:	9c 87       	std	Y+12, r25	; 0x0c
     d00:	ad 87       	std	Y+13, r26	; 0x0d
     d02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
 _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d04:	6b 85       	ldd	r22, Y+11	; 0x0b
     d06:	7c 85       	ldd	r23, Y+12	; 0x0c
     d08:	8d 85       	ldd	r24, Y+13	; 0x0d
     d0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	4a e7       	ldi	r20, 0x7A	; 122
     d12:	55 e4       	ldi	r21, 0x45	; 69
     d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	8f 83       	std	Y+7, r24	; 0x07
     d1e:	98 87       	std	Y+8, r25	; 0x08
     d20:	a9 87       	std	Y+9, r26	; 0x09
     d22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d24:	6f 81       	ldd	r22, Y+7	; 0x07
     d26:	78 85       	ldd	r23, Y+8	; 0x08
     d28:	89 85       	ldd	r24, Y+9	; 0x09
     d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	40 e8       	ldi	r20, 0x80	; 128
     d32:	5f e3       	ldi	r21, 0x3F	; 63
     d34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d38:	88 23       	and	r24, r24
     d3a:	2c f4       	brge	.+10     	; 0xd46 <CLCD_voidSendEnablePusle+0x70>
		__ticks = 1;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	9e 83       	std	Y+6, r25	; 0x06
     d42:	8d 83       	std	Y+5, r24	; 0x05
     d44:	3f c0       	rjmp	.+126    	; 0xdc4 <CLCD_voidSendEnablePusle+0xee>
	else if (__tmp > 65535)
     d46:	6f 81       	ldd	r22, Y+7	; 0x07
     d48:	78 85       	ldd	r23, Y+8	; 0x08
     d4a:	89 85       	ldd	r24, Y+9	; 0x09
     d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	3f ef       	ldi	r19, 0xFF	; 255
     d52:	4f e7       	ldi	r20, 0x7F	; 127
     d54:	57 e4       	ldi	r21, 0x47	; 71
     d56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d5a:	18 16       	cp	r1, r24
     d5c:	4c f5       	brge	.+82     	; 0xdb0 <CLCD_voidSendEnablePusle+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d60:	7c 85       	ldd	r23, Y+12	; 0x0c
     d62:	8d 85       	ldd	r24, Y+13	; 0x0d
     d64:	9e 85       	ldd	r25, Y+14	; 0x0e
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	40 e2       	ldi	r20, 0x20	; 32
     d6c:	51 e4       	ldi	r21, 0x41	; 65
     d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	bc 01       	movw	r22, r24
     d78:	cd 01       	movw	r24, r26
     d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	9e 83       	std	Y+6, r25	; 0x06
     d84:	8d 83       	std	Y+5, r24	; 0x05
     d86:	0f c0       	rjmp	.+30     	; 0xda6 <CLCD_voidSendEnablePusle+0xd0>
     d88:	80 e9       	ldi	r24, 0x90	; 144
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	9c 83       	std	Y+4, r25	; 0x04
     d8e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	9c 81       	ldd	r25, Y+4	; 0x04
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <CLCD_voidSendEnablePusle+0xbe>
     d98:	9c 83       	std	Y+4, r25	; 0x04
     d9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	9e 83       	std	Y+6, r25	; 0x06
     da4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da6:	8d 81       	ldd	r24, Y+5	; 0x05
     da8:	9e 81       	ldd	r25, Y+6	; 0x06
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	69 f7       	brne	.-38     	; 0xd88 <CLCD_voidSendEnablePusle+0xb2>
     dae:	14 c0       	rjmp	.+40     	; 0xdd8 <CLCD_voidSendEnablePusle+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db0:	6f 81       	ldd	r22, Y+7	; 0x07
     db2:	78 85       	ldd	r23, Y+8	; 0x08
     db4:	89 85       	ldd	r24, Y+9	; 0x09
     db6:	9a 85       	ldd	r25, Y+10	; 0x0a
     db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	9e 83       	std	Y+6, r25	; 0x06
     dc2:	8d 83       	std	Y+5, r24	; 0x05
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	9e 81       	ldd	r25, Y+6	; 0x06
     dc8:	9a 83       	std	Y+2, r25	; 0x02
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	9a 81       	ldd	r25, Y+2	; 0x02
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <CLCD_voidSendEnablePusle+0xfa>
     dd4:	9a 83       	std	Y+2, r25	; 0x02
     dd6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_u8PIN_LOW);
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	62 e0       	ldi	r22, 0x02	; 2
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
}
     de2:	2e 96       	adiw	r28, 0x0e	; 14
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	08 95       	ret

00000df4 <CLCD_voidSend4Bits>:

#if CLCD_u8BIT_MODE==FOUR_BIT
static void CLCD_voidSend4Bits(uint8 Copy_u8Command)
{
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	0f 92       	push	r0
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D4_PIN,GET_BIT(Copy_u8Command,0));
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	98 2f       	mov	r25, r24
     e04:	91 70       	andi	r25, 0x01	; 1
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	63 e0       	ldi	r22, 0x03	; 3
     e0a:	49 2f       	mov	r20, r25
     e0c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D5_PIN,GET_BIT(Copy_u8Command,1));
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	86 95       	lsr	r24
     e14:	98 2f       	mov	r25, r24
     e16:	91 70       	andi	r25, 0x01	; 1
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	64 e0       	ldi	r22, 0x04	; 4
     e1c:	49 2f       	mov	r20, r25
     e1e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D6_PIN,GET_BIT(Copy_u8Command,2));
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	86 95       	lsr	r24
     e26:	86 95       	lsr	r24
     e28:	98 2f       	mov	r25, r24
     e2a:	91 70       	andi	r25, 0x01	; 1
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	65 e0       	ldi	r22, 0x05	; 5
     e30:	49 2f       	mov	r20, r25
     e32:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D7_PIN,GET_BIT(Copy_u8Command,3));
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	86 95       	lsr	r24
     e3a:	86 95       	lsr	r24
     e3c:	86 95       	lsr	r24
     e3e:	98 2f       	mov	r25, r24
     e40:	91 70       	andi	r25, 0x01	; 1
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	66 e0       	ldi	r22, 0x06	; 6
     e46:	49 2f       	mov	r20, r25
     e48:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>

}
     e4c:	0f 90       	pop	r0
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <CLCD_voidInit>:




void CLCD_voidInit(void)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	2e 97       	sbiw	r28, 0x0e	; 14
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	a0 e2       	ldi	r26, 0x20	; 32
     e6e:	b2 e4       	ldi	r27, 0x42	; 66
     e70:	8b 87       	std	Y+11, r24	; 0x0b
     e72:	9c 87       	std	Y+12, r25	; 0x0c
     e74:	ad 87       	std	Y+13, r26	; 0x0d
     e76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
 _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e78:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	4a e7       	ldi	r20, 0x7A	; 122
     e86:	55 e4       	ldi	r21, 0x45	; 69
     e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	8f 83       	std	Y+7, r24	; 0x07
     e92:	98 87       	std	Y+8, r25	; 0x08
     e94:	a9 87       	std	Y+9, r26	; 0x09
     e96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e98:	6f 81       	ldd	r22, Y+7	; 0x07
     e9a:	78 85       	ldd	r23, Y+8	; 0x08
     e9c:	89 85       	ldd	r24, Y+9	; 0x09
     e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e8       	ldi	r20, 0x80	; 128
     ea6:	5f e3       	ldi	r21, 0x3F	; 63
     ea8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eac:	88 23       	and	r24, r24
     eae:	2c f4       	brge	.+10     	; 0xeba <CLCD_voidInit+0x66>
		__ticks = 1;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	9e 83       	std	Y+6, r25	; 0x06
     eb6:	8d 83       	std	Y+5, r24	; 0x05
     eb8:	3f c0       	rjmp	.+126    	; 0xf38 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     eba:	6f 81       	ldd	r22, Y+7	; 0x07
     ebc:	78 85       	ldd	r23, Y+8	; 0x08
     ebe:	89 85       	ldd	r24, Y+9	; 0x09
     ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	3f ef       	ldi	r19, 0xFF	; 255
     ec6:	4f e7       	ldi	r20, 0x7F	; 127
     ec8:	57 e4       	ldi	r21, 0x47	; 71
     eca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ece:	18 16       	cp	r1, r24
     ed0:	4c f5       	brge	.+82     	; 0xf24 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e2       	ldi	r20, 0x20	; 32
     ee0:	51 e4       	ldi	r21, 0x41	; 65
     ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	bc 01       	movw	r22, r24
     eec:	cd 01       	movw	r24, r26
     eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	9e 83       	std	Y+6, r25	; 0x06
     ef8:	8d 83       	std	Y+5, r24	; 0x05
     efa:	0f c0       	rjmp	.+30     	; 0xf1a <CLCD_voidInit+0xc6>
     efc:	80 e9       	ldi	r24, 0x90	; 144
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	9c 83       	std	Y+4, r25	; 0x04
     f02:	8b 83       	std	Y+3, r24	; 0x03
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <CLCD_voidInit+0xb4>
     f0c:	9c 83       	std	Y+4, r25	; 0x04
     f0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f10:	8d 81       	ldd	r24, Y+5	; 0x05
     f12:	9e 81       	ldd	r25, Y+6	; 0x06
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	9e 83       	std	Y+6, r25	; 0x06
     f18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1a:	8d 81       	ldd	r24, Y+5	; 0x05
     f1c:	9e 81       	ldd	r25, Y+6	; 0x06
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	69 f7       	brne	.-38     	; 0xefc <CLCD_voidInit+0xa8>
     f22:	14 c0       	rjmp	.+40     	; 0xf4c <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f24:	6f 81       	ldd	r22, Y+7	; 0x07
     f26:	78 85       	ldd	r23, Y+8	; 0x08
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	9e 83       	std	Y+6, r25	; 0x06
     f36:	8d 83       	std	Y+5, r24	; 0x05
     f38:	8d 81       	ldd	r24, Y+5	; 0x05
     f3a:	9e 81       	ldd	r25, Y+6	; 0x06
     f3c:	9a 83       	std	Y+2, r25	; 0x02
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	9a 81       	ldd	r25, Y+2	; 0x02
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <CLCD_voidInit+0xf0>
     f48:	9a 83       	std	Y+2, r25	; 0x02
     f4a:	89 83       	std	Y+1, r24	; 0x01
#if CLCD_u8BIT_MODE == EIGHT_BIT
		/*Function Set command : 2 lines , font size 5*11*/
		CLCD_voidSendCommand(0b00111000);

#elif CLCD_u8BIT_MODE == FOUR_BIT
		CLCD_voidSend4Bits(0b0010);
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <CLCD_voidSend4Bits>
		CLCD_voidSendEnablePusle();
     f52:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendEnablePusle>
		CLCD_voidSend4Bits(0b0010);
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <CLCD_voidSend4Bits>
		CLCD_voidSendEnablePusle();
     f5c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendEnablePusle>
		CLCD_voidSend4Bits(0b1000);
     f60:	88 e0       	ldi	r24, 0x08	; 8
     f62:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <CLCD_voidSend4Bits>
		CLCD_voidSendEnablePusle();
     f66:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendEnablePusle>
#endif

	/*Display on off control : Display on, cursor off, blink cursor off*/
		CLCD_voidSendCommand(0b00001100);
     f6a:	8c e0       	ldi	r24, 0x0C	; 12
     f6c:	0e 94 c4 07 	call	0xf88	; 0xf88 <CLCD_voidSendCommand>

	/*Clear display*/

    	CLCD_voidSendCommand(CLCD_CLEAR);
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	0e 94 c4 07 	call	0xf88	; 0xf88 <CLCD_voidSendCommand>

}
     f76:	2e 96       	adiw	r28, 0x0e	; 14
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <CLCD_voidSendCommand>:




void CLCD_voidSendCommand(uint8 Copy_u8Command)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	89 83       	std	Y+1, r24	; 0x01

	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8RS_PIN,DIO_u8PIN_LOW);
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	61 e0       	ldi	r22, 0x01	; 1
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
	/*Send enable pulse*/
	CLCD_voidSendEnablePusle();

#elif CLCD_u8BIT_MODE ==FOUR_BIT
	/*Send the 4 most most significant of the command first*/
	CLCD_voidSend4Bits(Copy_u8Command>>4);
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	82 95       	swap	r24
     fa2:	8f 70       	andi	r24, 0x0F	; 15
     fa4:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <CLCD_voidSend4Bits>

	CLCD_voidSendEnablePusle();
     fa8:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendEnablePusle>

	/*Send the 4 least   significant of the command first*/
	CLCD_voidSend4Bits(Copy_u8Command);
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <CLCD_voidSend4Bits>

	CLCD_voidSendEnablePusle();
     fb2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendEnablePusle>
#else
#error wrong CLCD_u8BIT_MODE configuration option

#endif
}
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	0f 92       	push	r0
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	89 83       	std	Y+1, r24	; 0x01

	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8RS_PIN,DIO_u8PIN_HIGH);
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	61 e0       	ldi	r22, 0x01	; 1
     fce:	41 e0       	ldi	r20, 0x01	; 1
     fd0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
	/*Send enable pulse*/
	CLCD_voidSendEnablePusle();

#elif CLCD_u8BIT_MODE ==FOUR_BIT
	/*Send the 4 most most significant of the command first*/
	CLCD_voidSend4Bits(Copy_u8Data>>4);
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	82 95       	swap	r24
     fd8:	8f 70       	andi	r24, 0x0F	; 15
     fda:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <CLCD_voidSend4Bits>

	CLCD_voidSendEnablePusle();
     fde:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendEnablePusle>

	/*Send the 4 least   significant of the command first*/
	CLCD_voidSend4Bits(Copy_u8Data);
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <CLCD_voidSend4Bits>

	CLCD_voidSendEnablePusle();
     fe8:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendEnablePusle>

#else
#error

#endif
}
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <CLCD_voidSendDataPos>:


void CLCD_voidSendDataPos(uint8 Copy_u8Row, uint8 Copy_u8Column, uint8 Local_u8Data)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <CLCD_voidSendDataPos+0x6>
     ffa:	0f 92       	push	r0
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	6a 83       	std	Y+2, r22	; 0x02
    1004:	4b 83       	std	Y+3, r20	; 0x03
	CLCD_u8GoToXY(Copy_u8Row,Copy_u8Column);
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	6a 81       	ldd	r22, Y+2	; 0x02
    100a:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_u8GoToXY>
	CLCD_voidSendData(Local_u8Data);
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <CLCD_voidSendString>:

ErrorState CLCD_voidSendString(const char * Copy_pu8Str)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	61 97       	sbiw	r28, 0x11	; 17
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	99 8b       	std	Y+17, r25	; 0x11
    1036:	88 8b       	std	Y+16, r24	; 0x10
	ErrorState Local_u8ErrorState=OK;
    1038:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8Str != NULL)
    103a:	88 89       	ldd	r24, Y+16	; 0x10
    103c:	99 89       	ldd	r25, Y+17	; 0x11
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	09 f4       	brne	.+2      	; 0x1044 <CLCD_voidSendString+0x24>
    1042:	85 c0       	rjmp	.+266    	; 0x114e <CLCD_voidSendString+0x12e>
    1044:	7d c0       	rjmp	.+250    	; 0x1140 <CLCD_voidSendString+0x120>
	{

		while(*Copy_pu8Str != '\0')
		{
			CLCD_voidSendData(*Copy_pu8Str++);
    1046:	e8 89       	ldd	r30, Y+16	; 0x10
    1048:	f9 89       	ldd	r31, Y+17	; 0x11
    104a:	20 81       	ld	r18, Z
    104c:	88 89       	ldd	r24, Y+16	; 0x10
    104e:	99 89       	ldd	r25, Y+17	; 0x11
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	99 8b       	std	Y+17, r25	; 0x11
    1054:	88 8b       	std	Y+16, r24	; 0x10
    1056:	82 2f       	mov	r24, r18
    1058:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a0 ea       	ldi	r26, 0xA0	; 160
    1062:	b0 e4       	ldi	r27, 0x40	; 64
    1064:	8b 87       	std	Y+11, r24	; 0x0b
    1066:	9c 87       	std	Y+12, r25	; 0x0c
    1068:	ad 87       	std	Y+13, r26	; 0x0d
    106a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
 _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106c:	6b 85       	ldd	r22, Y+11	; 0x0b
    106e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1070:	8d 85       	ldd	r24, Y+13	; 0x0d
    1072:	9e 85       	ldd	r25, Y+14	; 0x0e
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	4a e7       	ldi	r20, 0x7A	; 122
    107a:	55 e4       	ldi	r21, 0x45	; 69
    107c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	8f 83       	std	Y+7, r24	; 0x07
    1086:	98 87       	std	Y+8, r25	; 0x08
    1088:	a9 87       	std	Y+9, r26	; 0x09
    108a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    108c:	6f 81       	ldd	r22, Y+7	; 0x07
    108e:	78 85       	ldd	r23, Y+8	; 0x08
    1090:	89 85       	ldd	r24, Y+9	; 0x09
    1092:	9a 85       	ldd	r25, Y+10	; 0x0a
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e8       	ldi	r20, 0x80	; 128
    109a:	5f e3       	ldi	r21, 0x3F	; 63
    109c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10a0:	88 23       	and	r24, r24
    10a2:	2c f4       	brge	.+10     	; 0x10ae <CLCD_voidSendString+0x8e>
		__ticks = 1;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9e 83       	std	Y+6, r25	; 0x06
    10aa:	8d 83       	std	Y+5, r24	; 0x05
    10ac:	3f c0       	rjmp	.+126    	; 0x112c <CLCD_voidSendString+0x10c>
	else if (__tmp > 65535)
    10ae:	6f 81       	ldd	r22, Y+7	; 0x07
    10b0:	78 85       	ldd	r23, Y+8	; 0x08
    10b2:	89 85       	ldd	r24, Y+9	; 0x09
    10b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	3f ef       	ldi	r19, 0xFF	; 255
    10ba:	4f e7       	ldi	r20, 0x7F	; 127
    10bc:	57 e4       	ldi	r21, 0x47	; 71
    10be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10c2:	18 16       	cp	r1, r24
    10c4:	4c f5       	brge	.+82     	; 0x1118 <CLCD_voidSendString+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    10cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e2       	ldi	r20, 0x20	; 32
    10d4:	51 e4       	ldi	r21, 0x41	; 65
    10d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	bc 01       	movw	r22, r24
    10e0:	cd 01       	movw	r24, r26
    10e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	9e 83       	std	Y+6, r25	; 0x06
    10ec:	8d 83       	std	Y+5, r24	; 0x05
    10ee:	0f c0       	rjmp	.+30     	; 0x110e <CLCD_voidSendString+0xee>
    10f0:	80 e9       	ldi	r24, 0x90	; 144
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	9c 83       	std	Y+4, r25	; 0x04
    10f6:	8b 83       	std	Y+3, r24	; 0x03
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <CLCD_voidSendString+0xdc>
    1100:	9c 83       	std	Y+4, r25	; 0x04
    1102:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	69 f7       	brne	.-38     	; 0x10f0 <CLCD_voidSendString+0xd0>
    1116:	14 c0       	rjmp	.+40     	; 0x1140 <CLCD_voidSendString+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1118:	6f 81       	ldd	r22, Y+7	; 0x07
    111a:	78 85       	ldd	r23, Y+8	; 0x08
    111c:	89 85       	ldd	r24, Y+9	; 0x09
    111e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	9a 83       	std	Y+2, r25	; 0x02
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <CLCD_voidSendString+0x118>
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
{
	ErrorState Local_u8ErrorState=OK;
	if(Copy_pu8Str != NULL)
	{

		while(*Copy_pu8Str != '\0')
    1140:	e8 89       	ldd	r30, Y+16	; 0x10
    1142:	f9 89       	ldd	r31, Y+17	; 0x11
    1144:	80 81       	ld	r24, Z
    1146:	88 23       	and	r24, r24
    1148:	09 f0       	breq	.+2      	; 0x114c <CLCD_voidSendString+0x12c>
    114a:	7d cf       	rjmp	.-262    	; 0x1046 <CLCD_voidSendString+0x26>
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <CLCD_voidSendString+0x132>
			_delay_ms(5);
		}
	}
	else
	{
		Local_u8ErrorState=NULL_PTR_ERR;
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	8f 87       	std	Y+15, r24	; 0x0f
	}
	return Local_u8ErrorState;
    1152:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1154:	61 96       	adiw	r28, 0x11	; 17
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <CLCD_voidSendStringPos>:

ErrorState CLCD_voidSendStringPos(uint8 Copy_u8Row, uint8 Copy_u8Column, const char * Copy_pu8Str)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <CLCD_voidSendStringPos+0x6>
    116c:	00 d0       	rcall	.+0      	; 0x116e <CLCD_voidSendStringPos+0x8>
    116e:	0f 92       	push	r0
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	8a 83       	std	Y+2, r24	; 0x02
    1176:	6b 83       	std	Y+3, r22	; 0x03
    1178:	5d 83       	std	Y+5, r21	; 0x05
    117a:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState Local_u8ErrorState=OK;
    117c:	19 82       	std	Y+1, r1	; 0x01

	Local_u8ErrorState=CLCD_u8GoToXY(Copy_u8Row,Copy_u8Column);
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	6b 81       	ldd	r22, Y+3	; 0x03
    1182:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_u8GoToXY>
    1186:	89 83       	std	Y+1, r24	; 0x01

	Local_u8ErrorState=CLCD_voidSendString(Copy_pu8Str);
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	9d 81       	ldd	r25, Y+5	; 0x05
    118c:	0e 94 10 08 	call	0x1020	; 0x1020 <CLCD_voidSendString>
    1190:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    1192:	89 81       	ldd	r24, Y+1	; 0x01
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <CLCD_voidDisplayNumber>:


void CLCD_voidDisplayNumber(sint32 Copys32Number)
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	65 97       	sbiw	r28, 0x15	; 21
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	6a 8b       	std	Y+18, r22	; 0x12
    11ba:	7b 8b       	std	Y+19, r23	; 0x13
    11bc:	8c 8b       	std	Y+20, r24	; 0x14
    11be:	9d 8b       	std	Y+21, r25	; 0x15
	sint32  Local_u32Reminder,Local_u32Reverse=0,Local_u32NewN,Local_u32Length=0;
    11c0:	1a 86       	std	Y+10, r1	; 0x0a
    11c2:	1b 86       	std	Y+11, r1	; 0x0b
    11c4:	1c 86       	std	Y+12, r1	; 0x0c
    11c6:	1d 86       	std	Y+13, r1	; 0x0d
    11c8:	1a 82       	std	Y+2, r1	; 0x02
    11ca:	1b 82       	std	Y+3, r1	; 0x03
    11cc:	1c 82       	std	Y+4, r1	; 0x04
    11ce:	1d 82       	std	Y+5, r1	; 0x05
	sint8 Local_u8Counter;
	Local_u32NewN=Copys32Number;
    11d0:	8a 89       	ldd	r24, Y+18	; 0x12
    11d2:	9b 89       	ldd	r25, Y+19	; 0x13
    11d4:	ac 89       	ldd	r26, Y+20	; 0x14
    11d6:	bd 89       	ldd	r27, Y+21	; 0x15
    11d8:	8e 83       	std	Y+6, r24	; 0x06
    11da:	9f 83       	std	Y+7, r25	; 0x07
    11dc:	a8 87       	std	Y+8, r26	; 0x08
    11de:	b9 87       	std	Y+9, r27	; 0x09
	if(Copys32Number==0)
    11e0:	8a 89       	ldd	r24, Y+18	; 0x12
    11e2:	9b 89       	ldd	r25, Y+19	; 0x13
    11e4:	ac 89       	ldd	r26, Y+20	; 0x14
    11e6:	bd 89       	ldd	r27, Y+21	; 0x15
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	a1 05       	cpc	r26, r1
    11ec:	b1 05       	cpc	r27, r1
    11ee:	09 f5       	brne	.+66     	; 0x1232 <CLCD_voidDisplayNumber+0x8e>
	{
		CLCD_voidSendData('0');
    11f0:	80 e3       	ldi	r24, 0x30	; 48
    11f2:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
    11f6:	bd c0       	rjmp	.+378    	; 0x1372 <CLCD_voidDisplayNumber+0x1ce>
		return;
	}
	while(Local_u32NewN!=0)
	{
		Local_u32Length++;
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	9b 81       	ldd	r25, Y+3	; 0x03
    11fc:	ac 81       	ldd	r26, Y+4	; 0x04
    11fe:	bd 81       	ldd	r27, Y+5	; 0x05
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	a1 1d       	adc	r26, r1
    1204:	b1 1d       	adc	r27, r1
    1206:	8a 83       	std	Y+2, r24	; 0x02
    1208:	9b 83       	std	Y+3, r25	; 0x03
    120a:	ac 83       	std	Y+4, r26	; 0x04
    120c:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32NewN/=10;
    120e:	8e 81       	ldd	r24, Y+6	; 0x06
    1210:	9f 81       	ldd	r25, Y+7	; 0x07
    1212:	a8 85       	ldd	r26, Y+8	; 0x08
    1214:	b9 85       	ldd	r27, Y+9	; 0x09
    1216:	2a e0       	ldi	r18, 0x0A	; 10
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e0       	ldi	r20, 0x00	; 0
    121c:	50 e0       	ldi	r21, 0x00	; 0
    121e:	bc 01       	movw	r22, r24
    1220:	cd 01       	movw	r24, r26
    1222:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__divmodsi4>
    1226:	da 01       	movw	r26, r20
    1228:	c9 01       	movw	r24, r18
    122a:	8e 83       	std	Y+6, r24	; 0x06
    122c:	9f 83       	std	Y+7, r25	; 0x07
    122e:	a8 87       	std	Y+8, r26	; 0x08
    1230:	b9 87       	std	Y+9, r27	; 0x09
	if(Copys32Number==0)
	{
		CLCD_voidSendData('0');
		return;
	}
	while(Local_u32NewN!=0)
    1232:	8e 81       	ldd	r24, Y+6	; 0x06
    1234:	9f 81       	ldd	r25, Y+7	; 0x07
    1236:	a8 85       	ldd	r26, Y+8	; 0x08
    1238:	b9 85       	ldd	r27, Y+9	; 0x09
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	a1 05       	cpc	r26, r1
    123e:	b1 05       	cpc	r27, r1
    1240:	d9 f6       	brne	.-74     	; 0x11f8 <CLCD_voidDisplayNumber+0x54>
    1242:	3e c0       	rjmp	.+124    	; 0x12c0 <CLCD_voidDisplayNumber+0x11c>
		Local_u32NewN/=10;
	}

	while (Copys32Number != 0)
	{
		Local_u32Reminder=Copys32Number%10;
    1244:	8a 89       	ldd	r24, Y+18	; 0x12
    1246:	9b 89       	ldd	r25, Y+19	; 0x13
    1248:	ac 89       	ldd	r26, Y+20	; 0x14
    124a:	bd 89       	ldd	r27, Y+21	; 0x15
    124c:	2a e0       	ldi	r18, 0x0A	; 10
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e0       	ldi	r20, 0x00	; 0
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	bc 01       	movw	r22, r24
    1256:	cd 01       	movw	r24, r26
    1258:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__divmodsi4>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	8e 87       	std	Y+14, r24	; 0x0e
    1262:	9f 87       	std	Y+15, r25	; 0x0f
    1264:	a8 8b       	std	Y+16, r26	; 0x10
    1266:	b9 8b       	std	Y+17, r27	; 0x11
		Local_u32Reverse=Local_u32Reverse*10+Local_u32Reminder;
    1268:	8a 85       	ldd	r24, Y+10	; 0x0a
    126a:	9b 85       	ldd	r25, Y+11	; 0x0b
    126c:	ac 85       	ldd	r26, Y+12	; 0x0c
    126e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1270:	2a e0       	ldi	r18, 0x0A	; 10
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e0       	ldi	r20, 0x00	; 0
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	bc 01       	movw	r22, r24
    127a:	cd 01       	movw	r24, r26
    127c:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <__mulsi3>
    1280:	9b 01       	movw	r18, r22
    1282:	ac 01       	movw	r20, r24
    1284:	8e 85       	ldd	r24, Y+14	; 0x0e
    1286:	9f 85       	ldd	r25, Y+15	; 0x0f
    1288:	a8 89       	ldd	r26, Y+16	; 0x10
    128a:	b9 89       	ldd	r27, Y+17	; 0x11
    128c:	82 0f       	add	r24, r18
    128e:	93 1f       	adc	r25, r19
    1290:	a4 1f       	adc	r26, r20
    1292:	b5 1f       	adc	r27, r21
    1294:	8a 87       	std	Y+10, r24	; 0x0a
    1296:	9b 87       	std	Y+11, r25	; 0x0b
    1298:	ac 87       	std	Y+12, r26	; 0x0c
    129a:	bd 87       	std	Y+13, r27	; 0x0d
		Copys32Number /= 10;
    129c:	8a 89       	ldd	r24, Y+18	; 0x12
    129e:	9b 89       	ldd	r25, Y+19	; 0x13
    12a0:	ac 89       	ldd	r26, Y+20	; 0x14
    12a2:	bd 89       	ldd	r27, Y+21	; 0x15
    12a4:	2a e0       	ldi	r18, 0x0A	; 10
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	bc 01       	movw	r22, r24
    12ae:	cd 01       	movw	r24, r26
    12b0:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__divmodsi4>
    12b4:	da 01       	movw	r26, r20
    12b6:	c9 01       	movw	r24, r18
    12b8:	8a 8b       	std	Y+18, r24	; 0x12
    12ba:	9b 8b       	std	Y+19, r25	; 0x13
    12bc:	ac 8b       	std	Y+20, r26	; 0x14
    12be:	bd 8b       	std	Y+21, r27	; 0x15
	{
		Local_u32Length++;
		Local_u32NewN/=10;
	}

	while (Copys32Number != 0)
    12c0:	8a 89       	ldd	r24, Y+18	; 0x12
    12c2:	9b 89       	ldd	r25, Y+19	; 0x13
    12c4:	ac 89       	ldd	r26, Y+20	; 0x14
    12c6:	bd 89       	ldd	r27, Y+21	; 0x15
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	a1 05       	cpc	r26, r1
    12cc:	b1 05       	cpc	r27, r1
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <CLCD_voidDisplayNumber+0x12e>
    12d0:	b9 cf       	rjmp	.-142    	; 0x1244 <CLCD_voidDisplayNumber+0xa0>
		Local_u32Reminder=Copys32Number%10;
		Local_u32Reverse=Local_u32Reverse*10+Local_u32Reminder;
		Copys32Number /= 10;
	}

	if(Local_u32Reverse<0)
    12d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d6:	ac 85       	ldd	r26, Y+12	; 0x0c
    12d8:	bd 85       	ldd	r27, Y+13	; 0x0d
    12da:	bb 23       	and	r27, r27
    12dc:	94 f4       	brge	.+36     	; 0x1302 <CLCD_voidDisplayNumber+0x15e>
	{
		CLCD_voidSendData('-');
    12de:	8d e2       	ldi	r24, 0x2D	; 45
    12e0:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
		Local_u32Reverse*=-1;
    12e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12e8:	ac 85       	ldd	r26, Y+12	; 0x0c
    12ea:	bd 85       	ldd	r27, Y+13	; 0x0d
    12ec:	b0 95       	com	r27
    12ee:	a0 95       	com	r26
    12f0:	90 95       	com	r25
    12f2:	81 95       	neg	r24
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	af 4f       	sbci	r26, 0xFF	; 255
    12f8:	bf 4f       	sbci	r27, 0xFF	; 255
    12fa:	8a 87       	std	Y+10, r24	; 0x0a
    12fc:	9b 87       	std	Y+11, r25	; 0x0b
    12fe:	ac 87       	std	Y+12, r26	; 0x0c
    1300:	bd 87       	std	Y+13, r27	; 0x0d
	}

	for(Local_u8Counter=0;Local_u8Counter<Local_u32Length;Local_u8Counter++)
    1302:	19 82       	std	Y+1, r1	; 0x01
    1304:	26 c0       	rjmp	.+76     	; 0x1352 <CLCD_voidDisplayNumber+0x1ae>
	{
		CLCD_voidSendData((Local_u32Reverse%10)+'0');
    1306:	8a 85       	ldd	r24, Y+10	; 0x0a
    1308:	9b 85       	ldd	r25, Y+11	; 0x0b
    130a:	ac 85       	ldd	r26, Y+12	; 0x0c
    130c:	bd 85       	ldd	r27, Y+13	; 0x0d
    130e:	2a e0       	ldi	r18, 0x0A	; 10
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__divmodsi4>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	80 5d       	subi	r24, 0xD0	; 208
    1324:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
		Local_u32Reverse/=10;
    1328:	8a 85       	ldd	r24, Y+10	; 0x0a
    132a:	9b 85       	ldd	r25, Y+11	; 0x0b
    132c:	ac 85       	ldd	r26, Y+12	; 0x0c
    132e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	bc 01       	movw	r22, r24
    133a:	cd 01       	movw	r24, r26
    133c:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__divmodsi4>
    1340:	da 01       	movw	r26, r20
    1342:	c9 01       	movw	r24, r18
    1344:	8a 87       	std	Y+10, r24	; 0x0a
    1346:	9b 87       	std	Y+11, r25	; 0x0b
    1348:	ac 87       	std	Y+12, r26	; 0x0c
    134a:	bd 87       	std	Y+13, r27	; 0x0d
	{
		CLCD_voidSendData('-');
		Local_u32Reverse*=-1;
	}

	for(Local_u8Counter=0;Local_u8Counter<Local_u32Length;Local_u8Counter++)
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	28 2f       	mov	r18, r24
    1356:	33 27       	eor	r19, r19
    1358:	27 fd       	sbrc	r18, 7
    135a:	30 95       	com	r19
    135c:	43 2f       	mov	r20, r19
    135e:	53 2f       	mov	r21, r19
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	9b 81       	ldd	r25, Y+3	; 0x03
    1364:	ac 81       	ldd	r26, Y+4	; 0x04
    1366:	bd 81       	ldd	r27, Y+5	; 0x05
    1368:	28 17       	cp	r18, r24
    136a:	39 07       	cpc	r19, r25
    136c:	4a 07       	cpc	r20, r26
    136e:	5b 07       	cpc	r21, r27
    1370:	54 f2       	brlt	.-108    	; 0x1306 <CLCD_voidDisplayNumber+0x162>
	{
		CLCD_voidSendData((Local_u32Reverse%10)+'0');
		Local_u32Reverse/=10;
	}

}
    1372:	65 96       	adiw	r28, 0x15	; 21
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <CLCD_u8GoToXY>:

ErrorState CLCD_u8GoToXY(uint8 Copy_u8Row, uint8 Copy_u8Column)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	00 d0       	rcall	.+0      	; 0x138a <CLCD_u8GoToXY+0x6>
    138a:	00 d0       	rcall	.+0      	; 0x138c <CLCD_u8GoToXY+0x8>
    138c:	0f 92       	push	r0
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	8a 83       	std	Y+2, r24	; 0x02
    1394:	6b 83       	std	Y+3, r22	; 0x03

	ErrorState Local_u8ErrorState =OK;
    1396:	19 82       	std	Y+1, r1	; 0x01

	Copy_u8Column--;
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	81 50       	subi	r24, 0x01	; 1
    139c:	8b 83       	std	Y+3, r24	; 0x03
	switch(Copy_u8Row)
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	3d 83       	std	Y+5, r19	; 0x05
    13a6:	2c 83       	std	Y+4, r18	; 0x04
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
    13aa:	9d 81       	ldd	r25, Y+5	; 0x05
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	91 05       	cpc	r25, r1
    13b0:	31 f0       	breq	.+12     	; 0x13be <CLCD_u8GoToXY+0x3a>
    13b2:	2c 81       	ldd	r18, Y+4	; 0x04
    13b4:	3d 81       	ldd	r19, Y+5	; 0x05
    13b6:	22 30       	cpi	r18, 0x02	; 2
    13b8:	31 05       	cpc	r19, r1
    13ba:	31 f0       	breq	.+12     	; 0x13c8 <CLCD_u8GoToXY+0x44>
    13bc:	0a c0       	rjmp	.+20     	; 0x13d2 <CLCD_u8GoToXY+0x4e>
	{

	case CLCD_u8ROW1: CLCD_voidSendCommand(( 0x80 + Copy_u8Column )); break;
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	80 58       	subi	r24, 0x80	; 128
    13c2:	0e 94 c4 07 	call	0xf88	; 0xf88 <CLCD_voidSendCommand>
    13c6:	07 c0       	rjmp	.+14     	; 0x13d6 <CLCD_u8GoToXY+0x52>
	case CLCD_u8ROW2: CLCD_voidSendCommand(( 0xc0 + Copy_u8Column )); break;
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	80 54       	subi	r24, 0x40	; 64
    13cc:	0e 94 c4 07 	call	0xf88	; 0xf88 <CLCD_voidSendCommand>
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <CLCD_u8GoToXY+0x52>

	default : Local_u8ErrorState= NOT_OK ;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    13d6:	89 81       	ldd	r24, Y+1	; 0x01

}
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <CLCD_u8SendSpecialCharacter>:


ErrorState CLCD_u8SendSpecialCharacter(uint8 Copy_u8Location,uint8 *Copy_pu8Pattern,uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	28 97       	sbiw	r28, 0x08	; 8
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	8c 83       	std	Y+4, r24	; 0x04
    13fe:	7e 83       	std	Y+6, r23	; 0x06
    1400:	6d 83       	std	Y+5, r22	; 0x05
    1402:	4f 83       	std	Y+7, r20	; 0x07
    1404:	28 87       	std	Y+8, r18	; 0x08

	ErrorState Local_u8ErrorState =OK;
    1406:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_pu8Pattern != NULL)
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	9e 81       	ldd	r25, Y+6	; 0x06
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	69 f1       	breq	.+90     	; 0x146a <CLCD_u8SendSpecialCharacter+0x82>
	{
		sint8 Local_u8Counter;
		uint8 Local_u8CGRAMAddress =Copy_u8Location * 8;
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	89 83       	std	Y+1, r24	; 0x01

		/**/
		SET_BIT(Local_u8CGRAMAddress,6u);
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	80 64       	ori	r24, 0x40	; 64
    1428:	89 83       	std	Y+1, r24	; 0x01

		CLCD_voidSendCommand(Local_u8CGRAMAddress);
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	0e 94 c4 07 	call	0xf88	; 0xf88 <CLCD_voidSendCommand>

		for(Local_u8Counter=0u; Local_u8Counter<8u ;Local_u8Counter++ )
    1430:	1a 82       	std	Y+2, r1	; 0x02
    1432:	10 c0       	rjmp	.+32     	; 0x1454 <CLCD_u8SendSpecialCharacter+0x6c>
		{
			CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	33 27       	eor	r19, r19
    143a:	27 fd       	sbrc	r18, 7
    143c:	30 95       	com	r19
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	fc 01       	movw	r30, r24
    1444:	e2 0f       	add	r30, r18
    1446:	f3 1f       	adc	r31, r19
    1448:	80 81       	ld	r24, Z
    144a:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
		/**/
		SET_BIT(Local_u8CGRAMAddress,6u);

		CLCD_voidSendCommand(Local_u8CGRAMAddress);

		for(Local_u8Counter=0u; Local_u8Counter<8u ;Local_u8Counter++ )
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	8a 83       	std	Y+2, r24	; 0x02
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	88 30       	cpi	r24, 0x08	; 8
    1458:	68 f3       	brcs	.-38     	; 0x1434 <CLCD_u8SendSpecialCharacter+0x4c>
		{
			CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
		}

		CLCD_u8GoToXY(Copy_u8XPos,Copy_u8YPos);
    145a:	8f 81       	ldd	r24, Y+7	; 0x07
    145c:	68 85       	ldd	r22, Y+8	; 0x08
    145e:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_u8GoToXY>

		CLCD_voidSendData(Copy_u8Location);
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	0e 94 df 07 	call	0xfbe	; 0xfbe <CLCD_voidSendData>
    1468:	02 c0       	rjmp	.+4      	; 0x146e <CLCD_u8SendSpecialCharacter+0x86>
	}
	else
	{
		Local_u8ErrorState=NOT_OK;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_u8ErrorState;
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1470:	28 96       	adiw	r28, 0x08	; 8
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <Motor_voidRotateCW>:
 */



ErrorState Motor_voidRotateCW(motor_config * Motor)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <Motor_voidRotateCW+0x6>
    1488:	0f 92       	push	r0
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	9b 83       	std	Y+3, r25	; 0x03
    1490:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Local_u8ErrorState;


	if(NULL==Motor)
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	9b 81       	ldd	r25, Y+3	; 0x03
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	19 f4       	brne	.+6      	; 0x14a0 <Motor_voidRotateCW+0x1e>
	{
		Local_u8ErrorState=NULL_PTR_ERR;
    149a:	82 e0       	ldi	r24, 0x02	; 2
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <Motor_voidRotateCW+0x46>
	}
	else
	{

		DIO_u8SetPinValue(Motor->port,Motor->pin2,DIO_u8PIN_LOW);
    14a0:	ea 81       	ldd	r30, Y+2	; 0x02
    14a2:	fb 81       	ldd	r31, Y+3	; 0x03
    14a4:	80 81       	ld	r24, Z
    14a6:	ea 81       	ldd	r30, Y+2	; 0x02
    14a8:	fb 81       	ldd	r31, Y+3	; 0x03
    14aa:	92 81       	ldd	r25, Z+2	; 0x02
    14ac:	69 2f       	mov	r22, r25
    14ae:	40 e0       	ldi	r20, 0x00	; 0
    14b0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Motor->port,Motor->pin1,DIO_u8PIN_HIGH);
    14b4:	ea 81       	ldd	r30, Y+2	; 0x02
    14b6:	fb 81       	ldd	r31, Y+3	; 0x03
    14b8:	80 81       	ld	r24, Z
    14ba:	ea 81       	ldd	r30, Y+2	; 0x02
    14bc:	fb 81       	ldd	r31, Y+3	; 0x03
    14be:	91 81       	ldd	r25, Z+1	; 0x01
    14c0:	69 2f       	mov	r22, r25
    14c2:	41 e0       	ldi	r20, 0x01	; 1
    14c4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
	}
	return Local_u8ErrorState;
    14c8:	89 81       	ldd	r24, Y+1	; 0x01

}
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <Motor_voidRotateCCW>:


ErrorState Motor_voidRotateCCW(motor_config * Motor)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <Motor_voidRotateCCW+0x6>
    14dc:	0f 92       	push	r0
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	9b 83       	std	Y+3, r25	; 0x03
    14e4:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Local_u8ErrorState;
	if(NULL==Motor)
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	19 f4       	brne	.+6      	; 0x14f4 <Motor_voidRotateCCW+0x1e>
	{
		Local_u8ErrorState=NULL_PTR_ERR;
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <Motor_voidRotateCCW+0x46>
	}
	else
	{
		DIO_u8SetPinValue(Motor->port,Motor->pin1,DIO_u8PIN_LOW);
    14f4:	ea 81       	ldd	r30, Y+2	; 0x02
    14f6:	fb 81       	ldd	r31, Y+3	; 0x03
    14f8:	80 81       	ld	r24, Z
    14fa:	ea 81       	ldd	r30, Y+2	; 0x02
    14fc:	fb 81       	ldd	r31, Y+3	; 0x03
    14fe:	91 81       	ldd	r25, Z+1	; 0x01
    1500:	69 2f       	mov	r22, r25
    1502:	40 e0       	ldi	r20, 0x00	; 0
    1504:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Motor->port,Motor->pin2,DIO_u8PIN_HIGH);
    1508:	ea 81       	ldd	r30, Y+2	; 0x02
    150a:	fb 81       	ldd	r31, Y+3	; 0x03
    150c:	80 81       	ld	r24, Z
    150e:	ea 81       	ldd	r30, Y+2	; 0x02
    1510:	fb 81       	ldd	r31, Y+3	; 0x03
    1512:	92 81       	ldd	r25, Z+2	; 0x02
    1514:	69 2f       	mov	r22, r25
    1516:	41 e0       	ldi	r20, 0x01	; 1
    1518:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
	}

	return Local_u8ErrorState;
    151c:	89 81       	ldd	r24, Y+1	; 0x01
}
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <Motor_voidStop>:

ErrorState Motor_voidStop(motor_config * Motor)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	00 d0       	rcall	.+0      	; 0x1530 <Motor_voidStop+0x6>
    1530:	0f 92       	push	r0
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	9b 83       	std	Y+3, r25	; 0x03
    1538:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Local_u8ErrorState;
	if(NULL==Motor)
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	9b 81       	ldd	r25, Y+3	; 0x03
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	19 f4       	brne	.+6      	; 0x1548 <Motor_voidStop+0x1e>
	{
		Local_u8ErrorState=NULL_PTR_ERR;
    1542:	82 e0       	ldi	r24, 0x02	; 2
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	14 c0       	rjmp	.+40     	; 0x1570 <Motor_voidStop+0x46>
	}
	else
	{
		DIO_u8SetPinValue(Motor->port,Motor->pin1,DIO_u8PIN_LOW);
    1548:	ea 81       	ldd	r30, Y+2	; 0x02
    154a:	fb 81       	ldd	r31, Y+3	; 0x03
    154c:	80 81       	ld	r24, Z
    154e:	ea 81       	ldd	r30, Y+2	; 0x02
    1550:	fb 81       	ldd	r31, Y+3	; 0x03
    1552:	91 81       	ldd	r25, Z+1	; 0x01
    1554:	69 2f       	mov	r22, r25
    1556:	40 e0       	ldi	r20, 0x00	; 0
    1558:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Motor->port,Motor->pin2,DIO_u8PIN_LOW);
    155c:	ea 81       	ldd	r30, Y+2	; 0x02
    155e:	fb 81       	ldd	r31, Y+3	; 0x03
    1560:	80 81       	ld	r24, Z
    1562:	ea 81       	ldd	r30, Y+2	; 0x02
    1564:	fb 81       	ldd	r31, Y+3	; 0x03
    1566:	92 81       	ldd	r25, Z+2	; 0x02
    1568:	69 2f       	mov	r22, r25
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
	}
	return Local_u8ErrorState;
    1570:	89 81       	ldd	r24, Y+1	; 0x01

}
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_reg.h"
#include "DIO_config.h"

ErrorState  DIO_u8SetPinDirection(port_index Copy_u8Port,pin_index Copy_u8Pin,dirction_t Copy_u8Direction )
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	28 97       	sbiw	r28, 0x08	; 8
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	8a 83       	std	Y+2, r24	; 0x02
    1594:	6b 83       	std	Y+3, r22	; 0x03
    1596:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState Local_u8ErrorState=OK;
    1598:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Direction == DIO_u8PIN_INPUT)
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	88 23       	and	r24, r24
    159e:	09 f0       	breq	.+2      	; 0x15a2 <DIO_u8SetPinDirection+0x24>
    15a0:	77 c0       	rjmp	.+238    	; 0x1690 <DIO_u8SetPinDirection+0x112>
	{
		switch(Copy_u8Port)
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	38 87       	std	Y+8, r19	; 0x08
    15aa:	2f 83       	std	Y+7, r18	; 0x07
    15ac:	8f 81       	ldd	r24, Y+7	; 0x07
    15ae:	98 85       	ldd	r25, Y+8	; 0x08
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	91 05       	cpc	r25, r1
    15b4:	59 f1       	breq	.+86     	; 0x160c <DIO_u8SetPinDirection+0x8e>
    15b6:	2f 81       	ldd	r18, Y+7	; 0x07
    15b8:	38 85       	ldd	r19, Y+8	; 0x08
    15ba:	22 30       	cpi	r18, 0x02	; 2
    15bc:	31 05       	cpc	r19, r1
    15be:	2c f4       	brge	.+10     	; 0x15ca <DIO_u8SetPinDirection+0x4c>
    15c0:	8f 81       	ldd	r24, Y+7	; 0x07
    15c2:	98 85       	ldd	r25, Y+8	; 0x08
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	69 f0       	breq	.+26     	; 0x15e2 <DIO_u8SetPinDirection+0x64>
    15c8:	60 c0       	rjmp	.+192    	; 0x168a <DIO_u8SetPinDirection+0x10c>
    15ca:	2f 81       	ldd	r18, Y+7	; 0x07
    15cc:	38 85       	ldd	r19, Y+8	; 0x08
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	89 f1       	breq	.+98     	; 0x1636 <DIO_u8SetPinDirection+0xb8>
    15d4:	8f 81       	ldd	r24, Y+7	; 0x07
    15d6:	98 85       	ldd	r25, Y+8	; 0x08
    15d8:	83 30       	cpi	r24, 0x03	; 3
    15da:	91 05       	cpc	r25, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <DIO_u8SetPinDirection+0x62>
    15de:	40 c0       	rjmp	.+128    	; 0x1660 <DIO_u8SetPinDirection+0xe2>
    15e0:	54 c0       	rjmp	.+168    	; 0x168a <DIO_u8SetPinDirection+0x10c>
		{
		case DIO_u8PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
    15e2:	aa e3       	ldi	r26, 0x3A	; 58
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	ea e3       	ldi	r30, 0x3A	; 58
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <DIO_u8SetPinDirection+0x82>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <DIO_u8SetPinDirection+0x7e>
    1604:	80 95       	com	r24
    1606:	84 23       	and	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	ba c0       	rjmp	.+372    	; 0x1780 <DIO_u8SetPinDirection+0x202>
		case DIO_u8PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
    160c:	a7 e3       	ldi	r26, 0x37	; 55
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e7 e3       	ldi	r30, 0x37	; 55
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_u8SetPinDirection+0xac>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <DIO_u8SetPinDirection+0xa8>
    162e:	80 95       	com	r24
    1630:	84 23       	and	r24, r20
    1632:	8c 93       	st	X, r24
    1634:	a5 c0       	rjmp	.+330    	; 0x1780 <DIO_u8SetPinDirection+0x202>
		case DIO_u8PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
    1636:	a4 e3       	ldi	r26, 0x34	; 52
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e4 e3       	ldi	r30, 0x34	; 52
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	48 2f       	mov	r20, r24
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 2e       	mov	r0, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <DIO_u8SetPinDirection+0xd6>
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	0a 94       	dec	r0
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <DIO_u8SetPinDirection+0xd2>
    1658:	80 95       	com	r24
    165a:	84 23       	and	r24, r20
    165c:	8c 93       	st	X, r24
    165e:	90 c0       	rjmp	.+288    	; 0x1780 <DIO_u8SetPinDirection+0x202>
		case DIO_u8PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
    1660:	a1 e3       	ldi	r26, 0x31	; 49
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e1 e3       	ldi	r30, 0x31	; 49
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	48 2f       	mov	r20, r24
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 2e       	mov	r0, r18
    1678:	02 c0       	rjmp	.+4      	; 0x167e <DIO_u8SetPinDirection+0x100>
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	0a 94       	dec	r0
    1680:	e2 f7       	brpl	.-8      	; 0x167a <DIO_u8SetPinDirection+0xfc>
    1682:	80 95       	com	r24
    1684:	84 23       	and	r24, r20
    1686:	8c 93       	st	X, r24
    1688:	7b c0       	rjmp	.+246    	; 0x1780 <DIO_u8SetPinDirection+0x202>
		default: Local_u8ErrorState=NOT_OK;          break;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	78 c0       	rjmp	.+240    	; 0x1780 <DIO_u8SetPinDirection+0x202>
		}
	}
	else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	09 f0       	breq	.+2      	; 0x1698 <DIO_u8SetPinDirection+0x11a>
    1696:	72 c0       	rjmp	.+228    	; 0x177c <DIO_u8SetPinDirection+0x1fe>
	{
		switch(Copy_u8Port)
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	3e 83       	std	Y+6, r19	; 0x06
    16a0:	2d 83       	std	Y+5, r18	; 0x05
    16a2:	8d 81       	ldd	r24, Y+5	; 0x05
    16a4:	9e 81       	ldd	r25, Y+6	; 0x06
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	91 05       	cpc	r25, r1
    16aa:	49 f1       	breq	.+82     	; 0x16fe <DIO_u8SetPinDirection+0x180>
    16ac:	2d 81       	ldd	r18, Y+5	; 0x05
    16ae:	3e 81       	ldd	r19, Y+6	; 0x06
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	31 05       	cpc	r19, r1
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <DIO_u8SetPinDirection+0x142>
    16b6:	8d 81       	ldd	r24, Y+5	; 0x05
    16b8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	61 f0       	breq	.+24     	; 0x16d6 <DIO_u8SetPinDirection+0x158>
    16be:	5b c0       	rjmp	.+182    	; 0x1776 <DIO_u8SetPinDirection+0x1f8>
    16c0:	2d 81       	ldd	r18, Y+5	; 0x05
    16c2:	3e 81       	ldd	r19, Y+6	; 0x06
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	71 f1       	breq	.+92     	; 0x1726 <DIO_u8SetPinDirection+0x1a8>
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	9e 81       	ldd	r25, Y+6	; 0x06
    16ce:	83 30       	cpi	r24, 0x03	; 3
    16d0:	91 05       	cpc	r25, r1
    16d2:	e9 f1       	breq	.+122    	; 0x174e <DIO_u8SetPinDirection+0x1d0>
    16d4:	50 c0       	rjmp	.+160    	; 0x1776 <DIO_u8SetPinDirection+0x1f8>
		{
		case DIO_u8PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
    16d6:	aa e3       	ldi	r26, 0x3A	; 58
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	ea e3       	ldi	r30, 0x3A	; 58
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <DIO_u8SetPinDirection+0x176>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <DIO_u8SetPinDirection+0x172>
    16f8:	84 2b       	or	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	41 c0       	rjmp	.+130    	; 0x1780 <DIO_u8SetPinDirection+0x202>
		case DIO_u8PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
    16fe:	a7 e3       	ldi	r26, 0x37	; 55
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e7 e3       	ldi	r30, 0x37	; 55
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <DIO_u8SetPinDirection+0x19e>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <DIO_u8SetPinDirection+0x19a>
    1720:	84 2b       	or	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	2d c0       	rjmp	.+90     	; 0x1780 <DIO_u8SetPinDirection+0x202>
		case DIO_u8PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
    1726:	a4 e3       	ldi	r26, 0x34	; 52
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e4 e3       	ldi	r30, 0x34	; 52
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_u8SetPinDirection+0x1c6>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <DIO_u8SetPinDirection+0x1c2>
    1748:	84 2b       	or	r24, r20
    174a:	8c 93       	st	X, r24
    174c:	19 c0       	rjmp	.+50     	; 0x1780 <DIO_u8SetPinDirection+0x202>
		case DIO_u8PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
    174e:	a1 e3       	ldi	r26, 0x31	; 49
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e1 e3       	ldi	r30, 0x31	; 49
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <DIO_u8SetPinDirection+0x1ee>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <DIO_u8SetPinDirection+0x1ea>
    1770:	84 2b       	or	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	05 c0       	rjmp	.+10     	; 0x1780 <DIO_u8SetPinDirection+0x202>
		default: Local_u8ErrorState=NOT_OK; 		 break;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_u8SetPinDirection+0x202>
		}
	}
	else
	{
		Local_u8ErrorState=NOT_OK;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    1780:	89 81       	ldd	r24, Y+1	; 0x01
}
    1782:	28 96       	adiw	r28, 0x08	; 8
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <DIO_u8SetPinValue>:


ErrorState  DIO_u8SetPinValue(port_index Copy_u8Port,pin_index Copy_u8Pin,logic_t Copy_u8Value )
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	28 97       	sbiw	r28, 0x08	; 8
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	8a 83       	std	Y+2, r24	; 0x02
    17aa:	6b 83       	std	Y+3, r22	; 0x03
    17ac:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState Local_u8ErrorState=OK;
    17ae:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Value == DIO_u8PIN_LOW)
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	88 23       	and	r24, r24
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <DIO_u8SetPinValue+0x24>
    17b6:	77 c0       	rjmp	.+238    	; 0x18a6 <DIO_u8SetPinValue+0x112>
	{
		switch(Copy_u8Port)
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	38 87       	std	Y+8, r19	; 0x08
    17c0:	2f 83       	std	Y+7, r18	; 0x07
    17c2:	8f 81       	ldd	r24, Y+7	; 0x07
    17c4:	98 85       	ldd	r25, Y+8	; 0x08
    17c6:	81 30       	cpi	r24, 0x01	; 1
    17c8:	91 05       	cpc	r25, r1
    17ca:	59 f1       	breq	.+86     	; 0x1822 <DIO_u8SetPinValue+0x8e>
    17cc:	2f 81       	ldd	r18, Y+7	; 0x07
    17ce:	38 85       	ldd	r19, Y+8	; 0x08
    17d0:	22 30       	cpi	r18, 0x02	; 2
    17d2:	31 05       	cpc	r19, r1
    17d4:	2c f4       	brge	.+10     	; 0x17e0 <DIO_u8SetPinValue+0x4c>
    17d6:	8f 81       	ldd	r24, Y+7	; 0x07
    17d8:	98 85       	ldd	r25, Y+8	; 0x08
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	69 f0       	breq	.+26     	; 0x17f8 <DIO_u8SetPinValue+0x64>
    17de:	60 c0       	rjmp	.+192    	; 0x18a0 <DIO_u8SetPinValue+0x10c>
    17e0:	2f 81       	ldd	r18, Y+7	; 0x07
    17e2:	38 85       	ldd	r19, Y+8	; 0x08
    17e4:	22 30       	cpi	r18, 0x02	; 2
    17e6:	31 05       	cpc	r19, r1
    17e8:	89 f1       	breq	.+98     	; 0x184c <DIO_u8SetPinValue+0xb8>
    17ea:	8f 81       	ldd	r24, Y+7	; 0x07
    17ec:	98 85       	ldd	r25, Y+8	; 0x08
    17ee:	83 30       	cpi	r24, 0x03	; 3
    17f0:	91 05       	cpc	r25, r1
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <DIO_u8SetPinValue+0x62>
    17f4:	40 c0       	rjmp	.+128    	; 0x1876 <DIO_u8SetPinValue+0xe2>
    17f6:	54 c0       	rjmp	.+168    	; 0x18a0 <DIO_u8SetPinValue+0x10c>
		{
		case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    17f8:	ab e3       	ldi	r26, 0x3B	; 59
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	eb e3       	ldi	r30, 0x3B	; 59
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	48 2f       	mov	r20, r24
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 2e       	mov	r0, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <DIO_u8SetPinValue+0x82>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	0a 94       	dec	r0
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <DIO_u8SetPinValue+0x7e>
    181a:	80 95       	com	r24
    181c:	84 23       	and	r24, r20
    181e:	8c 93       	st	X, r24
    1820:	ba c0       	rjmp	.+372    	; 0x1996 <DIO_u8SetPinValue+0x202>
		case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    1822:	a8 e3       	ldi	r26, 0x38	; 56
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e8 e3       	ldi	r30, 0x38	; 56
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <DIO_u8SetPinValue+0xac>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <DIO_u8SetPinValue+0xa8>
    1844:	80 95       	com	r24
    1846:	84 23       	and	r24, r20
    1848:	8c 93       	st	X, r24
    184a:	a5 c0       	rjmp	.+330    	; 0x1996 <DIO_u8SetPinValue+0x202>
		case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    184c:	a5 e3       	ldi	r26, 0x35	; 53
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e5 e3       	ldi	r30, 0x35	; 53
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	48 2f       	mov	r20, r24
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	02 2e       	mov	r0, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <DIO_u8SetPinValue+0xd6>
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	0a 94       	dec	r0
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <DIO_u8SetPinValue+0xd2>
    186e:	80 95       	com	r24
    1870:	84 23       	and	r24, r20
    1872:	8c 93       	st	X, r24
    1874:	90 c0       	rjmp	.+288    	; 0x1996 <DIO_u8SetPinValue+0x202>
		case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    1876:	a2 e3       	ldi	r26, 0x32	; 50
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e2 e3       	ldi	r30, 0x32	; 50
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	48 2f       	mov	r20, r24
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	02 2e       	mov	r0, r18
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <DIO_u8SetPinValue+0x100>
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	0a 94       	dec	r0
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <DIO_u8SetPinValue+0xfc>
    1898:	80 95       	com	r24
    189a:	84 23       	and	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	7b c0       	rjmp	.+246    	; 0x1996 <DIO_u8SetPinValue+0x202>
		default: Local_u8ErrorState=NOT_OK;           break;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	78 c0       	rjmp	.+240    	; 0x1996 <DIO_u8SetPinValue+0x202>
		}
	}
	else if(Copy_u8Value == DIO_u8PIN_HIGH)
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	09 f0       	breq	.+2      	; 0x18ae <DIO_u8SetPinValue+0x11a>
    18ac:	72 c0       	rjmp	.+228    	; 0x1992 <DIO_u8SetPinValue+0x1fe>
	{
		switch(Copy_u8Port)
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3e 83       	std	Y+6, r19	; 0x06
    18b6:	2d 83       	std	Y+5, r18	; 0x05
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	9e 81       	ldd	r25, Y+6	; 0x06
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	91 05       	cpc	r25, r1
    18c0:	49 f1       	breq	.+82     	; 0x1914 <DIO_u8SetPinValue+0x180>
    18c2:	2d 81       	ldd	r18, Y+5	; 0x05
    18c4:	3e 81       	ldd	r19, Y+6	; 0x06
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	2c f4       	brge	.+10     	; 0x18d6 <DIO_u8SetPinValue+0x142>
    18cc:	8d 81       	ldd	r24, Y+5	; 0x05
    18ce:	9e 81       	ldd	r25, Y+6	; 0x06
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	61 f0       	breq	.+24     	; 0x18ec <DIO_u8SetPinValue+0x158>
    18d4:	5b c0       	rjmp	.+182    	; 0x198c <DIO_u8SetPinValue+0x1f8>
    18d6:	2d 81       	ldd	r18, Y+5	; 0x05
    18d8:	3e 81       	ldd	r19, Y+6	; 0x06
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	71 f1       	breq	.+92     	; 0x193c <DIO_u8SetPinValue+0x1a8>
    18e0:	8d 81       	ldd	r24, Y+5	; 0x05
    18e2:	9e 81       	ldd	r25, Y+6	; 0x06
    18e4:	83 30       	cpi	r24, 0x03	; 3
    18e6:	91 05       	cpc	r25, r1
    18e8:	e9 f1       	breq	.+122    	; 0x1964 <DIO_u8SetPinValue+0x1d0>
    18ea:	50 c0       	rjmp	.+160    	; 0x198c <DIO_u8SetPinValue+0x1f8>
		{
		case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    18ec:	ab e3       	ldi	r26, 0x3B	; 59
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	eb e3       	ldi	r30, 0x3B	; 59
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 2e       	mov	r0, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <DIO_u8SetPinValue+0x176>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	0a 94       	dec	r0
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <DIO_u8SetPinValue+0x172>
    190e:	84 2b       	or	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	41 c0       	rjmp	.+130    	; 0x1996 <DIO_u8SetPinValue+0x202>
		case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    1914:	a8 e3       	ldi	r26, 0x38	; 56
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e8 e3       	ldi	r30, 0x38	; 56
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	48 2f       	mov	r20, r24
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 2e       	mov	r0, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <DIO_u8SetPinValue+0x19e>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <DIO_u8SetPinValue+0x19a>
    1936:	84 2b       	or	r24, r20
    1938:	8c 93       	st	X, r24
    193a:	2d c0       	rjmp	.+90     	; 0x1996 <DIO_u8SetPinValue+0x202>
		case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    193c:	a5 e3       	ldi	r26, 0x35	; 53
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e5 e3       	ldi	r30, 0x35	; 53
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	48 2f       	mov	r20, r24
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	02 2e       	mov	r0, r18
    1954:	02 c0       	rjmp	.+4      	; 0x195a <DIO_u8SetPinValue+0x1c6>
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	0a 94       	dec	r0
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <DIO_u8SetPinValue+0x1c2>
    195e:	84 2b       	or	r24, r20
    1960:	8c 93       	st	X, r24
    1962:	19 c0       	rjmp	.+50     	; 0x1996 <DIO_u8SetPinValue+0x202>
		case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    1964:	a2 e3       	ldi	r26, 0x32	; 50
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e2 e3       	ldi	r30, 0x32	; 50
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	48 2f       	mov	r20, r24
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	02 2e       	mov	r0, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <DIO_u8SetPinValue+0x1ee>
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	0a 94       	dec	r0
    1984:	e2 f7       	brpl	.-8      	; 0x197e <DIO_u8SetPinValue+0x1ea>
    1986:	84 2b       	or	r24, r20
    1988:	8c 93       	st	X, r24
    198a:	05 c0       	rjmp	.+10     	; 0x1996 <DIO_u8SetPinValue+0x202>
		default: Local_u8ErrorState=NOT_OK; 		  break;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <DIO_u8SetPinValue+0x202>
		}
	}
	else
	{
		Local_u8ErrorState=NOT_OK;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    1996:	89 81       	ldd	r24, Y+1	; 0x01
}
    1998:	28 96       	adiw	r28, 0x08	; 8
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <DIO_u8ReadPinValue>:


ErrorState  DIO_u8ReadPinValue(port_index Copy_u8Port,pin_index Copy_u8Pin,uint8 * Copy_pu8Value )
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	27 97       	sbiw	r28, 0x07	; 7
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	8a 83       	std	Y+2, r24	; 0x02
    19c0:	6b 83       	std	Y+3, r22	; 0x03
    19c2:	5d 83       	std	Y+5, r21	; 0x05
    19c4:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState Local_u8ErrorState=OK;
    19c6:	19 82       	std	Y+1, r1	; 0x01

	if (((Copy_u8Pin >=DIO_u8PIN0) && (Copy_u8Pin <=DIO_u8PIN7)) || ( NULL != Copy_pu8Value ))
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	88 30       	cpi	r24, 0x08	; 8
    19cc:	28 f0       	brcs	.+10     	; 0x19d8 <DIO_u8ReadPinValue+0x2e>
    19ce:	8c 81       	ldd	r24, Y+4	; 0x04
    19d0:	9d 81       	ldd	r25, Y+5	; 0x05
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <DIO_u8ReadPinValue+0x2e>
    19d6:	74 c0       	rjmp	.+232    	; 0x1ac0 <DIO_u8ReadPinValue+0x116>
	{
		switch(Copy_u8Port)
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	3f 83       	std	Y+7, r19	; 0x07
    19e0:	2e 83       	std	Y+6, r18	; 0x06
    19e2:	4e 81       	ldd	r20, Y+6	; 0x06
    19e4:	5f 81       	ldd	r21, Y+7	; 0x07
    19e6:	41 30       	cpi	r20, 0x01	; 1
    19e8:	51 05       	cpc	r21, r1
    19ea:	59 f1       	breq	.+86     	; 0x1a42 <DIO_u8ReadPinValue+0x98>
    19ec:	8e 81       	ldd	r24, Y+6	; 0x06
    19ee:	9f 81       	ldd	r25, Y+7	; 0x07
    19f0:	82 30       	cpi	r24, 0x02	; 2
    19f2:	91 05       	cpc	r25, r1
    19f4:	34 f4       	brge	.+12     	; 0x1a02 <DIO_u8ReadPinValue+0x58>
    19f6:	2e 81       	ldd	r18, Y+6	; 0x06
    19f8:	3f 81       	ldd	r19, Y+7	; 0x07
    19fa:	21 15       	cp	r18, r1
    19fc:	31 05       	cpc	r19, r1
    19fe:	69 f0       	breq	.+26     	; 0x1a1a <DIO_u8ReadPinValue+0x70>
    1a00:	5c c0       	rjmp	.+184    	; 0x1aba <DIO_u8ReadPinValue+0x110>
    1a02:	4e 81       	ldd	r20, Y+6	; 0x06
    1a04:	5f 81       	ldd	r21, Y+7	; 0x07
    1a06:	42 30       	cpi	r20, 0x02	; 2
    1a08:	51 05       	cpc	r21, r1
    1a0a:	79 f1       	breq	.+94     	; 0x1a6a <DIO_u8ReadPinValue+0xc0>
    1a0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a10:	83 30       	cpi	r24, 0x03	; 3
    1a12:	91 05       	cpc	r25, r1
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <DIO_u8ReadPinValue+0x6e>
    1a16:	3d c0       	rjmp	.+122    	; 0x1a92 <DIO_u8ReadPinValue+0xe8>
    1a18:	50 c0       	rjmp	.+160    	; 0x1aba <DIO_u8ReadPinValue+0x110>
		{
		case DIO_u8PORTA : *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);    break;
    1a1a:	e9 e3       	ldi	r30, 0x39	; 57
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	88 2f       	mov	r24, r24
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	a9 01       	movw	r20, r18
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <DIO_u8ReadPinValue+0x88>
    1a2e:	55 95       	asr	r21
    1a30:	47 95       	ror	r20
    1a32:	8a 95       	dec	r24
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <DIO_u8ReadPinValue+0x84>
    1a36:	ca 01       	movw	r24, r20
    1a38:	81 70       	andi	r24, 0x01	; 1
    1a3a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a3c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a3e:	80 83       	st	Z, r24
    1a40:	4b c0       	rjmp	.+150    	; 0x1ad8 <DIO_u8ReadPinValue+0x12e>
		case DIO_u8PORTB : *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);    break;
    1a42:	e6 e3       	ldi	r30, 0x36	; 54
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a9 01       	movw	r20, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <DIO_u8ReadPinValue+0xb0>
    1a56:	55 95       	asr	r21
    1a58:	47 95       	ror	r20
    1a5a:	8a 95       	dec	r24
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <DIO_u8ReadPinValue+0xac>
    1a5e:	ca 01       	movw	r24, r20
    1a60:	81 70       	andi	r24, 0x01	; 1
    1a62:	ec 81       	ldd	r30, Y+4	; 0x04
    1a64:	fd 81       	ldd	r31, Y+5	; 0x05
    1a66:	80 83       	st	Z, r24
    1a68:	37 c0       	rjmp	.+110    	; 0x1ad8 <DIO_u8ReadPinValue+0x12e>
		case DIO_u8PORTC : *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);    break;
    1a6a:	e3 e3       	ldi	r30, 0x33	; 51
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	88 2f       	mov	r24, r24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	a9 01       	movw	r20, r18
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <DIO_u8ReadPinValue+0xd8>
    1a7e:	55 95       	asr	r21
    1a80:	47 95       	ror	r20
    1a82:	8a 95       	dec	r24
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <DIO_u8ReadPinValue+0xd4>
    1a86:	ca 01       	movw	r24, r20
    1a88:	81 70       	andi	r24, 0x01	; 1
    1a8a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a8c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a8e:	80 83       	st	Z, r24
    1a90:	23 c0       	rjmp	.+70     	; 0x1ad8 <DIO_u8ReadPinValue+0x12e>
		case DIO_u8PORTD : *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);    break;
    1a92:	e0 e3       	ldi	r30, 0x30	; 48
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	88 2f       	mov	r24, r24
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a9 01       	movw	r20, r18
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <DIO_u8ReadPinValue+0x100>
    1aa6:	55 95       	asr	r21
    1aa8:	47 95       	ror	r20
    1aaa:	8a 95       	dec	r24
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <DIO_u8ReadPinValue+0xfc>
    1aae:	ca 01       	movw	r24, r20
    1ab0:	81 70       	andi	r24, 0x01	; 1
    1ab2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ab4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ab6:	80 83       	st	Z, r24
    1ab8:	0f c0       	rjmp	.+30     	; 0x1ad8 <DIO_u8ReadPinValue+0x12e>

		default: Local_u8ErrorState=NOT_OK;           				   break;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	0c c0       	rjmp	.+24     	; 0x1ad8 <DIO_u8ReadPinValue+0x12e>
		}
	}
	else
	{
		if( NULL != Copy_pu8Value )
    1ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	19 f0       	breq	.+6      	; 0x1ace <DIO_u8ReadPinValue+0x124>
		Local_u8ErrorState=NULL_PTR_ERR;
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	05 c0       	rjmp	.+10     	; 0x1ad8 <DIO_u8ReadPinValue+0x12e>
		else if((Copy_u8Pin >=DIO_u8PIN0) && (Copy_u8Pin <=DIO_u8PIN7))
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	88 30       	cpi	r24, 0x08	; 8
    1ad2:	10 f4       	brcc	.+4      	; 0x1ad8 <DIO_u8ReadPinValue+0x12e>
		Local_u8ErrorState=NOT_OK;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_u8ErrorState ;
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ada:	27 96       	adiw	r28, 0x07	; 7
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <DIO_u8TogglePinValue>:

ErrorState  DIO_u8TogglePinValue(port_index Copy_u8Port,pin_index Copy_u8Pin)
{
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <DIO_u8TogglePinValue+0x6>
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <DIO_u8TogglePinValue+0x8>
    1af4:	0f 92       	push	r0
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	8a 83       	std	Y+2, r24	; 0x02
    1afc:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState Local_u8ErrorState=OK;
    1afe:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin >=DIO_u8PIN0 && Copy_u8Pin <=DIO_u8PIN7 )
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	88 30       	cpi	r24, 0x08	; 8
    1b04:	08 f0       	brcs	.+2      	; 0x1b08 <DIO_u8TogglePinValue+0x1c>
    1b06:	72 c0       	rjmp	.+228    	; 0x1bec <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	3d 83       	std	Y+5, r19	; 0x05
    1b10:	2c 83       	std	Y+4, r18	; 0x04
    1b12:	8c 81       	ldd	r24, Y+4	; 0x04
    1b14:	9d 81       	ldd	r25, Y+5	; 0x05
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	91 05       	cpc	r25, r1
    1b1a:	49 f1       	breq	.+82     	; 0x1b6e <DIO_u8TogglePinValue+0x82>
    1b1c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b20:	22 30       	cpi	r18, 0x02	; 2
    1b22:	31 05       	cpc	r19, r1
    1b24:	2c f4       	brge	.+10     	; 0x1b30 <DIO_u8TogglePinValue+0x44>
    1b26:	8c 81       	ldd	r24, Y+4	; 0x04
    1b28:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	61 f0       	breq	.+24     	; 0x1b46 <DIO_u8TogglePinValue+0x5a>
    1b2e:	5b c0       	rjmp	.+182    	; 0x1be6 <DIO_u8TogglePinValue+0xfa>
    1b30:	2c 81       	ldd	r18, Y+4	; 0x04
    1b32:	3d 81       	ldd	r19, Y+5	; 0x05
    1b34:	22 30       	cpi	r18, 0x02	; 2
    1b36:	31 05       	cpc	r19, r1
    1b38:	71 f1       	breq	.+92     	; 0x1b96 <DIO_u8TogglePinValue+0xaa>
    1b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3e:	83 30       	cpi	r24, 0x03	; 3
    1b40:	91 05       	cpc	r25, r1
    1b42:	e9 f1       	breq	.+122    	; 0x1bbe <DIO_u8TogglePinValue+0xd2>
    1b44:	50 c0       	rjmp	.+160    	; 0x1be6 <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA : TOGGLE_BIT(PORTA,Copy_u8Pin); break;
    1b46:	ab e3       	ldi	r26, 0x3B	; 59
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	eb e3       	ldi	r30, 0x3B	; 59
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	48 2f       	mov	r20, r24
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	02 2e       	mov	r0, r18
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <DIO_u8TogglePinValue+0x78>
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	0a 94       	dec	r0
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <DIO_u8TogglePinValue+0x74>
    1b68:	84 27       	eor	r24, r20
    1b6a:	8c 93       	st	X, r24
    1b6c:	41 c0       	rjmp	.+130    	; 0x1bf0 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB : TOGGLE_BIT(PORTB,Copy_u8Pin); break;
    1b6e:	a8 e3       	ldi	r26, 0x38	; 56
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e8 e3       	ldi	r30, 0x38	; 56
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	48 2f       	mov	r20, r24
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	02 2e       	mov	r0, r18
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <DIO_u8TogglePinValue+0xa0>
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	0a 94       	dec	r0
    1b8e:	e2 f7       	brpl	.-8      	; 0x1b88 <DIO_u8TogglePinValue+0x9c>
    1b90:	84 27       	eor	r24, r20
    1b92:	8c 93       	st	X, r24
    1b94:	2d c0       	rjmp	.+90     	; 0x1bf0 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC : TOGGLE_BIT(PORTC,Copy_u8Pin); break;
    1b96:	a5 e3       	ldi	r26, 0x35	; 53
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e5 e3       	ldi	r30, 0x35	; 53
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	48 2f       	mov	r20, r24
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	02 2e       	mov	r0, r18
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <DIO_u8TogglePinValue+0xc8>
    1bb0:	88 0f       	add	r24, r24
    1bb2:	99 1f       	adc	r25, r25
    1bb4:	0a 94       	dec	r0
    1bb6:	e2 f7       	brpl	.-8      	; 0x1bb0 <DIO_u8TogglePinValue+0xc4>
    1bb8:	84 27       	eor	r24, r20
    1bba:	8c 93       	st	X, r24
    1bbc:	19 c0       	rjmp	.+50     	; 0x1bf0 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD : TOGGLE_BIT(PORTD,Copy_u8Pin); break;
    1bbe:	a2 e3       	ldi	r26, 0x32	; 50
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e2 e3       	ldi	r30, 0x32	; 50
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	48 2f       	mov	r20, r24
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	02 2e       	mov	r0, r18
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <DIO_u8TogglePinValue+0xf0>
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	0a 94       	dec	r0
    1bde:	e2 f7       	brpl	.-8      	; 0x1bd8 <DIO_u8TogglePinValue+0xec>
    1be0:	84 27       	eor	r24, r20
    1be2:	8c 93       	st	X, r24
    1be4:	05 c0       	rjmp	.+10     	; 0x1bf0 <DIO_u8TogglePinValue+0x104>

		default: Local_u8ErrorState=NOT_OK;              break;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState=NOT_OK;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <DIO_u8SetPortDirection>:


ErrorState  DIO_u8SetPortDirection(port_index Copy_u8Port,uint8 Copy_u8Direction )
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <DIO_u8SetPortDirection+0x6>
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <DIO_u8SetPortDirection+0x8>
    1c0a:	0f 92       	push	r0
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	8a 83       	std	Y+2, r24	; 0x02
    1c12:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState Local_u8ErrorState=OK;
    1c14:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	3d 83       	std	Y+5, r19	; 0x05
    1c1e:	2c 83       	std	Y+4, r18	; 0x04
    1c20:	8c 81       	ldd	r24, Y+4	; 0x04
    1c22:	9d 81       	ldd	r25, Y+5	; 0x05
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	91 05       	cpc	r25, r1
    1c28:	d1 f0       	breq	.+52     	; 0x1c5e <DIO_u8SetPortDirection+0x5c>
    1c2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2e:	22 30       	cpi	r18, 0x02	; 2
    1c30:	31 05       	cpc	r19, r1
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <DIO_u8SetPortDirection+0x3c>
    1c34:	8c 81       	ldd	r24, Y+4	; 0x04
    1c36:	9d 81       	ldd	r25, Y+5	; 0x05
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	61 f0       	breq	.+24     	; 0x1c54 <DIO_u8SetPortDirection+0x52>
    1c3c:	1f c0       	rjmp	.+62     	; 0x1c7c <DIO_u8SetPortDirection+0x7a>
    1c3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c40:	3d 81       	ldd	r19, Y+5	; 0x05
    1c42:	22 30       	cpi	r18, 0x02	; 2
    1c44:	31 05       	cpc	r19, r1
    1c46:	81 f0       	breq	.+32     	; 0x1c68 <DIO_u8SetPortDirection+0x66>
    1c48:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4c:	83 30       	cpi	r24, 0x03	; 3
    1c4e:	91 05       	cpc	r25, r1
    1c50:	81 f0       	breq	.+32     	; 0x1c72 <DIO_u8SetPortDirection+0x70>
    1c52:	14 c0       	rjmp	.+40     	; 0x1c7c <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA=Copy_u8Direction;	 break;
    1c54:	ea e3       	ldi	r30, 0x3A	; 58
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	80 83       	st	Z, r24
    1c5c:	11 c0       	rjmp	.+34     	; 0x1c80 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB=Copy_u8Direction; 	 break;
    1c5e:	e7 e3       	ldi	r30, 0x37	; 55
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	80 83       	st	Z, r24
    1c66:	0c c0       	rjmp	.+24     	; 0x1c80 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC=Copy_u8Direction; 	 break;
    1c68:	e4 e3       	ldi	r30, 0x34	; 52
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	80 83       	st	Z, r24
    1c70:	07 c0       	rjmp	.+14     	; 0x1c80 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD=Copy_u8Direction;    break;
    1c72:	e1 e3       	ldi	r30, 0x31	; 49
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	80 83       	st	Z, r24
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=NOT_OK;          break;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1c80:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <DIO_u8SetPortValue>:


ErrorState  DIO_u8SetPortValue(port_index Copy_u8Port ,uint8 Copy_u8Value )
{
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <DIO_u8SetPortValue+0x6>
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <DIO_u8SetPortValue+0x8>
    1c9a:	0f 92       	push	r0
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	8a 83       	std	Y+2, r24	; 0x02
    1ca2:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState Local_u8ErrorState=OK;
    1ca4:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	3d 83       	std	Y+5, r19	; 0x05
    1cae:	2c 83       	std	Y+4, r18	; 0x04
    1cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	d1 f0       	breq	.+52     	; 0x1cee <DIO_u8SetPortValue+0x5c>
    1cba:	2c 81       	ldd	r18, Y+4	; 0x04
    1cbc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cbe:	22 30       	cpi	r18, 0x02	; 2
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <DIO_u8SetPortValue+0x3c>
    1cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	61 f0       	breq	.+24     	; 0x1ce4 <DIO_u8SetPortValue+0x52>
    1ccc:	1f c0       	rjmp	.+62     	; 0x1d0c <DIO_u8SetPortValue+0x7a>
    1cce:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd2:	22 30       	cpi	r18, 0x02	; 2
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	81 f0       	breq	.+32     	; 0x1cf8 <DIO_u8SetPortValue+0x66>
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	9d 81       	ldd	r25, Y+5	; 0x05
    1cdc:	83 30       	cpi	r24, 0x03	; 3
    1cde:	91 05       	cpc	r25, r1
    1ce0:	81 f0       	breq	.+32     	; 0x1d02 <DIO_u8SetPortValue+0x70>
    1ce2:	14 c0       	rjmp	.+40     	; 0x1d0c <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA=Copy_u8Value;	 break;
    1ce4:	eb e3       	ldi	r30, 0x3B	; 59
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	80 83       	st	Z, r24
    1cec:	11 c0       	rjmp	.+34     	; 0x1d10 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB=Copy_u8Value; 	 break;
    1cee:	e8 e3       	ldi	r30, 0x38	; 56
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	80 83       	st	Z, r24
    1cf6:	0c c0       	rjmp	.+24     	; 0x1d10 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC=Copy_u8Value; 	 break;
    1cf8:	e5 e3       	ldi	r30, 0x35	; 53
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	80 83       	st	Z, r24
    1d00:	07 c0       	rjmp	.+14     	; 0x1d10 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD=Copy_u8Value;   break;
    1d02:	e2 e3       	ldi	r30, 0x32	; 50
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	80 83       	st	Z, r24
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=NOT_OK;      break;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1d10:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <DIO_u8TogglePortValue>:


ErrorState  DIO_u8TogglePortValue(port_index Copy_u8Port )
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <DIO_u8TogglePortValue+0x6>
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <DIO_u8TogglePortValue+0x8>
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	8a 83       	std	Y+2, r24	; 0x02

	ErrorState Local_u8ErrorState=OK;
    1d30:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	3c 83       	std	Y+4, r19	; 0x04
    1d3a:	2b 83       	std	Y+3, r18	; 0x03
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	91 05       	cpc	r25, r1
    1d44:	e9 f0       	breq	.+58     	; 0x1d80 <DIO_u8TogglePortValue+0x5e>
    1d46:	2b 81       	ldd	r18, Y+3	; 0x03
    1d48:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4a:	22 30       	cpi	r18, 0x02	; 2
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	2c f4       	brge	.+10     	; 0x1d5a <DIO_u8TogglePortValue+0x38>
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	61 f0       	breq	.+24     	; 0x1d70 <DIO_u8TogglePortValue+0x4e>
    1d58:	2b c0       	rjmp	.+86     	; 0x1db0 <DIO_u8TogglePortValue+0x8e>
    1d5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5e:	22 30       	cpi	r18, 0x02	; 2
    1d60:	31 05       	cpc	r19, r1
    1d62:	b1 f0       	breq	.+44     	; 0x1d90 <DIO_u8TogglePortValue+0x6e>
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	83 30       	cpi	r24, 0x03	; 3
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	c9 f0       	breq	.+50     	; 0x1da0 <DIO_u8TogglePortValue+0x7e>
    1d6e:	20 c0       	rjmp	.+64     	; 0x1db0 <DIO_u8TogglePortValue+0x8e>
	{
	case DIO_u8PORTA : PORTA=~PORTA;	 break;
    1d70:	ab e3       	ldi	r26, 0x3B	; 59
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	eb e3       	ldi	r30, 0x3B	; 59
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	80 95       	com	r24
    1d7c:	8c 93       	st	X, r24
    1d7e:	1a c0       	rjmp	.+52     	; 0x1db4 <DIO_u8TogglePortValue+0x92>
	case DIO_u8PORTB : PORTB=~PORTB; 	 break;
    1d80:	a8 e3       	ldi	r26, 0x38	; 56
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e8 e3       	ldi	r30, 0x38	; 56
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	80 95       	com	r24
    1d8c:	8c 93       	st	X, r24
    1d8e:	12 c0       	rjmp	.+36     	; 0x1db4 <DIO_u8TogglePortValue+0x92>
	case DIO_u8PORTC : PORTC=~PORTC; 	 break;
    1d90:	a5 e3       	ldi	r26, 0x35	; 53
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e5 e3       	ldi	r30, 0x35	; 53
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	80 95       	com	r24
    1d9c:	8c 93       	st	X, r24
    1d9e:	0a c0       	rjmp	.+20     	; 0x1db4 <DIO_u8TogglePortValue+0x92>
	case DIO_u8PORTD : PORTD=~PORTD;  	 break;
    1da0:	a2 e3       	ldi	r26, 0x32	; 50
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e2 e3       	ldi	r30, 0x32	; 50
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	80 95       	com	r24
    1dac:	8c 93       	st	X, r24
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <DIO_u8TogglePortValue+0x92>
	default: Local_u8ErrorState=NOT_OK;  break;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1db4:	89 81       	ldd	r24, Y+1	; 0x01

}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <EXTI_voidInit>:

static void (*EXTI_pvCallBack[3])(void) = {0} ;


void EXTI_voidInit(void)
{
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
#elif INT0_SENCE_CTRL == EXTI_FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
	SET_BIT(MCUCR,MCUCR_ISC01);

#elif INT0_SENCE_CTRL == EXTI_RISING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC00);
    1dcc:	a5 e5       	ldi	r26, 0x55	; 85
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e5 e5       	ldi	r30, 0x55	; 85
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	81 60       	ori	r24, 0x01	; 1
    1dd8:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    1dda:	a5 e5       	ldi	r26, 0x55	; 85
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e5 e5       	ldi	r30, 0x55	; 85
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	82 60       	ori	r24, 0x02	; 2
    1de6:	8c 93       	st	X, r24

	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC01);

#elif INT1_SENCE_CTRL == EXTI_FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
    1de8:	a5 e5       	ldi	r26, 0x55	; 85
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e5 e5       	ldi	r30, 0x55	; 85
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	8b 7f       	andi	r24, 0xFB	; 251
    1df4:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    1df6:	a5 e5       	ldi	r26, 0x55	; 85
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e5 e5       	ldi	r30, 0x55	; 85
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	88 60       	ori	r24, 0x08	; 8
    1e02:	8c 93       	st	X, r24

#endif


#if INT1_SENCE_CTRL == EXTI_FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_ISC2);
    1e04:	a4 e5       	ldi	r26, 0x54	; 84
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e4 e5       	ldi	r30, 0x54	; 84
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	8f 7b       	andi	r24, 0xBF	; 191
    1e10:	8c 93       	st	X, r24


#if INT0_INIT_STATE == DISABLED
	CLR_BIT(GICR , GICR_INT0);
#elif INT0_INIT_STATE == ENABLED
	SET_BIT(GICR , GICR_INT0);
    1e12:	ab e5       	ldi	r26, 0x5B	; 91
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	eb e5       	ldi	r30, 0x5B	; 91
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	80 64       	ori	r24, 0x40	; 64
    1e1e:	8c 93       	st	X, r24

#endif


#if INT1_INIT_STATE == DISABLED
	CLR_BIT(GICR , GICR_INT1);
    1e20:	ab e5       	ldi	r26, 0x5B	; 91
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	eb e5       	ldi	r30, 0x5B	; 91
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	8f 77       	andi	r24, 0x7F	; 127
    1e2c:	8c 93       	st	X, r24

#if INT2_INIT_STATE == DISABLED
	CLR_BIT(GICR , GICR_INT2);

#elif INT2_INIT_STATE == ENABLED
	SET_BIT(GICR , GICR_INT2);
    1e2e:	ab e5       	ldi	r26, 0x5B	; 91
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	eb e5       	ldi	r30, 0x5B	; 91
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	80 62       	ori	r24, 0x20	; 32
    1e3a:	8c 93       	st	X, r24
	#error Wrong INT0_INIT_STATE Configuration option

#endif


}
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	08 95       	ret

00001e42 <EXTI_u8SetSenceCtrl>:
uint8 EXTI_u8SetSenceCtrl(IntChannel_t Copy_IntCh, SenceCtrl_t Copy_SenceCtrl)
{
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	29 97       	sbiw	r28, 0x09	; 9
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	de bf       	out	0x3e, r29	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	8a 83       	std	Y+2, r24	; 0x02
    1e58:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState Local_u8ErrorState ;

	if(Copy_IntCh == INT0 )
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	88 23       	and	r24, r24
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <EXTI_u8SetSenceCtrl+0x20>
    1e60:	5e c0       	rjmp	.+188    	; 0x1f1e <EXTI_u8SetSenceCtrl+0xdc>
	{
		switch(Copy_SenceCtrl)
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	39 87       	std	Y+9, r19	; 0x09
    1e6a:	28 87       	std	Y+8, r18	; 0x08
    1e6c:	88 85       	ldd	r24, Y+8	; 0x08
    1e6e:	99 85       	ldd	r25, Y+9	; 0x09
    1e70:	81 30       	cpi	r24, 0x01	; 1
    1e72:	91 05       	cpc	r25, r1
    1e74:	21 f1       	breq	.+72     	; 0x1ebe <EXTI_u8SetSenceCtrl+0x7c>
    1e76:	28 85       	ldd	r18, Y+8	; 0x08
    1e78:	39 85       	ldd	r19, Y+9	; 0x09
    1e7a:	22 30       	cpi	r18, 0x02	; 2
    1e7c:	31 05       	cpc	r19, r1
    1e7e:	2c f4       	brge	.+10     	; 0x1e8a <EXTI_u8SetSenceCtrl+0x48>
    1e80:	88 85       	ldd	r24, Y+8	; 0x08
    1e82:	99 85       	ldd	r25, Y+9	; 0x09
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	61 f0       	breq	.+24     	; 0x1ea0 <EXTI_u8SetSenceCtrl+0x5e>
    1e88:	47 c0       	rjmp	.+142    	; 0x1f18 <EXTI_u8SetSenceCtrl+0xd6>
    1e8a:	28 85       	ldd	r18, Y+8	; 0x08
    1e8c:	39 85       	ldd	r19, Y+9	; 0x09
    1e8e:	22 30       	cpi	r18, 0x02	; 2
    1e90:	31 05       	cpc	r19, r1
    1e92:	21 f1       	breq	.+72     	; 0x1edc <EXTI_u8SetSenceCtrl+0x9a>
    1e94:	88 85       	ldd	r24, Y+8	; 0x08
    1e96:	99 85       	ldd	r25, Y+9	; 0x09
    1e98:	83 30       	cpi	r24, 0x03	; 3
    1e9a:	91 05       	cpc	r25, r1
    1e9c:	71 f1       	breq	.+92     	; 0x1efa <EXTI_u8SetSenceCtrl+0xb8>
    1e9e:	3c c0       	rjmp	.+120    	; 0x1f18 <EXTI_u8SetSenceCtrl+0xd6>
		{
		case LOW_LEVEL:	 CLR_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    1ea0:	a5 e5       	ldi	r26, 0x55	; 85
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e5 e5       	ldi	r30, 0x55	; 85
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	8e 7f       	andi	r24, 0xFE	; 254
    1eac:	8c 93       	st	X, r24
    1eae:	a5 e5       	ldi	r26, 0x55	; 85
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e5 e5       	ldi	r30, 0x55	; 85
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	8d 7f       	andi	r24, 0xFD	; 253
    1eba:	8c 93       	st	X, r24
    1ebc:	b7 c0       	rjmp	.+366    	; 0x202c <EXTI_u8SetSenceCtrl+0x1ea>
		case ON_CHAGNE:	 SET_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    1ebe:	a5 e5       	ldi	r26, 0x55	; 85
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e5 e5       	ldi	r30, 0x55	; 85
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	81 60       	ori	r24, 0x01	; 1
    1eca:	8c 93       	st	X, r24
    1ecc:	a5 e5       	ldi	r26, 0x55	; 85
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e5 e5       	ldi	r30, 0x55	; 85
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	8d 7f       	andi	r24, 0xFD	; 253
    1ed8:	8c 93       	st	X, r24
    1eda:	a8 c0       	rjmp	.+336    	; 0x202c <EXTI_u8SetSenceCtrl+0x1ea>
		case FALLING_EDGE : CLR_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    1edc:	a5 e5       	ldi	r26, 0x55	; 85
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e5 e5       	ldi	r30, 0x55	; 85
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8e 7f       	andi	r24, 0xFE	; 254
    1ee8:	8c 93       	st	X, r24
    1eea:	a5 e5       	ldi	r26, 0x55	; 85
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e5 e5       	ldi	r30, 0x55	; 85
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	82 60       	ori	r24, 0x02	; 2
    1ef6:	8c 93       	st	X, r24
    1ef8:	99 c0       	rjmp	.+306    	; 0x202c <EXTI_u8SetSenceCtrl+0x1ea>
		case RISING_EDGE :  SET_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    1efa:	a5 e5       	ldi	r26, 0x55	; 85
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e5 e5       	ldi	r30, 0x55	; 85
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	81 60       	ori	r24, 0x01	; 1
    1f06:	8c 93       	st	X, r24
    1f08:	a5 e5       	ldi	r26, 0x55	; 85
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e5 e5       	ldi	r30, 0x55	; 85
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	82 60       	ori	r24, 0x02	; 2
    1f14:	8c 93       	st	X, r24
    1f16:	8a c0       	rjmp	.+276    	; 0x202c <EXTI_u8SetSenceCtrl+0x1ea>

		default : Local_u8ErrorState = NOT_OK;
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	87 c0       	rjmp	.+270    	; 0x202c <EXTI_u8SetSenceCtrl+0x1ea>
		}
	}
	else if (Copy_IntCh == INT1 )
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	09 f0       	breq	.+2      	; 0x1f26 <EXTI_u8SetSenceCtrl+0xe4>
    1f24:	5e c0       	rjmp	.+188    	; 0x1fe2 <EXTI_u8SetSenceCtrl+0x1a0>
	{
		switch(Copy_SenceCtrl)
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	3f 83       	std	Y+7, r19	; 0x07
    1f2e:	2e 83       	std	Y+6, r18	; 0x06
    1f30:	8e 81       	ldd	r24, Y+6	; 0x06
    1f32:	9f 81       	ldd	r25, Y+7	; 0x07
    1f34:	81 30       	cpi	r24, 0x01	; 1
    1f36:	91 05       	cpc	r25, r1
    1f38:	21 f1       	breq	.+72     	; 0x1f82 <EXTI_u8SetSenceCtrl+0x140>
    1f3a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f3c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f3e:	22 30       	cpi	r18, 0x02	; 2
    1f40:	31 05       	cpc	r19, r1
    1f42:	2c f4       	brge	.+10     	; 0x1f4e <EXTI_u8SetSenceCtrl+0x10c>
    1f44:	8e 81       	ldd	r24, Y+6	; 0x06
    1f46:	9f 81       	ldd	r25, Y+7	; 0x07
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	61 f0       	breq	.+24     	; 0x1f64 <EXTI_u8SetSenceCtrl+0x122>
    1f4c:	47 c0       	rjmp	.+142    	; 0x1fdc <EXTI_u8SetSenceCtrl+0x19a>
    1f4e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f50:	3f 81       	ldd	r19, Y+7	; 0x07
    1f52:	22 30       	cpi	r18, 0x02	; 2
    1f54:	31 05       	cpc	r19, r1
    1f56:	21 f1       	breq	.+72     	; 0x1fa0 <EXTI_u8SetSenceCtrl+0x15e>
    1f58:	8e 81       	ldd	r24, Y+6	; 0x06
    1f5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f5c:	83 30       	cpi	r24, 0x03	; 3
    1f5e:	91 05       	cpc	r25, r1
    1f60:	71 f1       	breq	.+92     	; 0x1fbe <EXTI_u8SetSenceCtrl+0x17c>
    1f62:	3c c0       	rjmp	.+120    	; 0x1fdc <EXTI_u8SetSenceCtrl+0x19a>
		{
		case LOW_LEVEL:	 CLR_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10); break;
    1f64:	a5 e5       	ldi	r26, 0x55	; 85
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e5 e5       	ldi	r30, 0x55	; 85
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	87 7f       	andi	r24, 0xF7	; 247
    1f70:	8c 93       	st	X, r24
    1f72:	a5 e5       	ldi	r26, 0x55	; 85
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e5 e5       	ldi	r30, 0x55	; 85
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	8b 7f       	andi	r24, 0xFB	; 251
    1f7e:	8c 93       	st	X, r24
    1f80:	55 c0       	rjmp	.+170    	; 0x202c <EXTI_u8SetSenceCtrl+0x1ea>
		case ON_CHAGNE:	 CLR_BIT(MCUCR,MCUCR_ISC11); SET_BIT(MCUCR,MCUCR_ISC10); break;
    1f82:	a5 e5       	ldi	r26, 0x55	; 85
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e5 e5       	ldi	r30, 0x55	; 85
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	87 7f       	andi	r24, 0xF7	; 247
    1f8e:	8c 93       	st	X, r24
    1f90:	a5 e5       	ldi	r26, 0x55	; 85
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e5 e5       	ldi	r30, 0x55	; 85
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	84 60       	ori	r24, 0x04	; 4
    1f9c:	8c 93       	st	X, r24
    1f9e:	46 c0       	rjmp	.+140    	; 0x202c <EXTI_u8SetSenceCtrl+0x1ea>
		case FALLING_EDGE : SET_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10); break;
    1fa0:	a5 e5       	ldi	r26, 0x55	; 85
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e5 e5       	ldi	r30, 0x55	; 85
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	88 60       	ori	r24, 0x08	; 8
    1fac:	8c 93       	st	X, r24
    1fae:	a5 e5       	ldi	r26, 0x55	; 85
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e5 e5       	ldi	r30, 0x55	; 85
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	8b 7f       	andi	r24, 0xFB	; 251
    1fba:	8c 93       	st	X, r24
    1fbc:	37 c0       	rjmp	.+110    	; 0x202c <EXTI_u8SetSenceCtrl+0x1ea>
		case RISING_EDGE :  SET_BIT(MCUCR,MCUCR_ISC11); SET_BIT(MCUCR,MCUCR_ISC10); break;
    1fbe:	a5 e5       	ldi	r26, 0x55	; 85
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e5 e5       	ldi	r30, 0x55	; 85
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	88 60       	ori	r24, 0x08	; 8
    1fca:	8c 93       	st	X, r24
    1fcc:	a5 e5       	ldi	r26, 0x55	; 85
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e5 e5       	ldi	r30, 0x55	; 85
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	84 60       	ori	r24, 0x04	; 4
    1fd8:	8c 93       	st	X, r24
    1fda:	28 c0       	rjmp	.+80     	; 0x202c <EXTI_u8SetSenceCtrl+0x1ea>


		default : Local_u8ErrorState = NOT_OK;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	25 c0       	rjmp	.+74     	; 0x202c <EXTI_u8SetSenceCtrl+0x1ea>
		}
	}
	else if (Copy_IntCh == INT2 )
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	82 30       	cpi	r24, 0x02	; 2
    1fe6:	11 f5       	brne	.+68     	; 0x202c <EXTI_u8SetSenceCtrl+0x1ea>
	{
		switch(Copy_SenceCtrl)
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	3d 83       	std	Y+5, r19	; 0x05
    1ff0:	2c 83       	std	Y+4, r18	; 0x04
    1ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff6:	82 30       	cpi	r24, 0x02	; 2
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	31 f0       	breq	.+12     	; 0x2008 <EXTI_u8SetSenceCtrl+0x1c6>
    1ffc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    2000:	23 30       	cpi	r18, 0x03	; 3
    2002:	31 05       	cpc	r19, r1
    2004:	49 f0       	breq	.+18     	; 0x2018 <EXTI_u8SetSenceCtrl+0x1d6>
    2006:	10 c0       	rjmp	.+32     	; 0x2028 <EXTI_u8SetSenceCtrl+0x1e6>
		{
		case FALLING_EDGE : CLR_BIT(MCUCSR,MCUCSR_ISC2); break;
    2008:	a4 e5       	ldi	r26, 0x54	; 84
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e4 e5       	ldi	r30, 0x54	; 84
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	8f 7b       	andi	r24, 0xBF	; 191
    2014:	8c 93       	st	X, r24
    2016:	0a c0       	rjmp	.+20     	; 0x202c <EXTI_u8SetSenceCtrl+0x1ea>
		case RISING_EDGE :  SET_BIT(MCUCSR,MCUCSR_ISC2);  break;
    2018:	a4 e5       	ldi	r26, 0x54	; 84
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e4 e5       	ldi	r30, 0x54	; 84
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	80 64       	ori	r24, 0x40	; 64
    2024:	8c 93       	st	X, r24
    2026:	02 c0       	rjmp	.+4      	; 0x202c <EXTI_u8SetSenceCtrl+0x1ea>

		default : Local_u8ErrorState = NOT_OK;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	89 83       	std	Y+1, r24	; 0x01

		}

	}
	return Local_u8ErrorState;
    202c:	89 81       	ldd	r24, Y+1	; 0x01

}
    202e:	29 96       	adiw	r28, 0x09	; 9
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	de bf       	out	0x3e, r29	; 62
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	cd bf       	out	0x3d, r28	; 61
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <EXTI_u8EnableIntChannel>:



uint8 EXTI_u8EnableIntChannel(IntChannel_t Copy_IntCh)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	00 d0       	rcall	.+0      	; 0x2046 <EXTI_u8EnableIntChannel+0x6>
    2046:	00 d0       	rcall	.+0      	; 0x2048 <EXTI_u8EnableIntChannel+0x8>
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Local_u8ErrorState;

	switch (Copy_IntCh)
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	28 2f       	mov	r18, r24
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	3c 83       	std	Y+4, r19	; 0x04
    2056:	2b 83       	std	Y+3, r18	; 0x03
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	81 30       	cpi	r24, 0x01	; 1
    205e:	91 05       	cpc	r25, r1
    2060:	89 f0       	breq	.+34     	; 0x2084 <EXTI_u8EnableIntChannel+0x44>
    2062:	2b 81       	ldd	r18, Y+3	; 0x03
    2064:	3c 81       	ldd	r19, Y+4	; 0x04
    2066:	22 30       	cpi	r18, 0x02	; 2
    2068:	31 05       	cpc	r19, r1
    206a:	a1 f0       	breq	.+40     	; 0x2094 <EXTI_u8EnableIntChannel+0x54>
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	9c 81       	ldd	r25, Y+4	; 0x04
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	c1 f4       	brne	.+48     	; 0x20a4 <EXTI_u8EnableIntChannel+0x64>
	{
	case INT0: SET_BIT(GICR , GICR_INT0);  break;
    2074:	ab e5       	ldi	r26, 0x5B	; 91
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	eb e5       	ldi	r30, 0x5B	; 91
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	80 64       	ori	r24, 0x40	; 64
    2080:	8c 93       	st	X, r24
    2082:	12 c0       	rjmp	.+36     	; 0x20a8 <EXTI_u8EnableIntChannel+0x68>
	case INT1: SET_BIT(GICR , GICR_INT1);   break;
    2084:	ab e5       	ldi	r26, 0x5B	; 91
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	eb e5       	ldi	r30, 0x5B	; 91
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	80 68       	ori	r24, 0x80	; 128
    2090:	8c 93       	st	X, r24
    2092:	0a c0       	rjmp	.+20     	; 0x20a8 <EXTI_u8EnableIntChannel+0x68>
	case INT2: SET_BIT(GICR , GICR_INT2);   break;
    2094:	ab e5       	ldi	r26, 0x5B	; 91
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	eb e5       	ldi	r30, 0x5B	; 91
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	80 62       	ori	r24, 0x20	; 32
    20a0:	8c 93       	st	X, r24
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <EXTI_u8EnableIntChannel+0x68>

	default:  Local_u8ErrorState=NOT_OK;  break;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrorState;
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <EXTI_u8DisableIntChannel>:
uint8 EXTI_u8DisableIntChannel(IntChannel_t Copy_IntCh)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <EXTI_u8DisableIntChannel+0x6>
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <EXTI_u8DisableIntChannel+0x8>
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Local_u8ErrorState;

	switch (Copy_IntCh)
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	3c 83       	std	Y+4, r19	; 0x04
    20ce:	2b 83       	std	Y+3, r18	; 0x03
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	81 30       	cpi	r24, 0x01	; 1
    20d6:	91 05       	cpc	r25, r1
    20d8:	89 f0       	breq	.+34     	; 0x20fc <EXTI_u8DisableIntChannel+0x44>
    20da:	2b 81       	ldd	r18, Y+3	; 0x03
    20dc:	3c 81       	ldd	r19, Y+4	; 0x04
    20de:	22 30       	cpi	r18, 0x02	; 2
    20e0:	31 05       	cpc	r19, r1
    20e2:	a1 f0       	breq	.+40     	; 0x210c <EXTI_u8DisableIntChannel+0x54>
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	c1 f4       	brne	.+48     	; 0x211c <EXTI_u8DisableIntChannel+0x64>
	{
	case INT0: CLR_BIT(GICR , GICR_INT0);  break;
    20ec:	ab e5       	ldi	r26, 0x5B	; 91
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	eb e5       	ldi	r30, 0x5B	; 91
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	8f 7b       	andi	r24, 0xBF	; 191
    20f8:	8c 93       	st	X, r24
    20fa:	12 c0       	rjmp	.+36     	; 0x2120 <EXTI_u8DisableIntChannel+0x68>
	case INT1: CLR_BIT(GICR , GICR_INT1);   break;
    20fc:	ab e5       	ldi	r26, 0x5B	; 91
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	eb e5       	ldi	r30, 0x5B	; 91
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	8f 77       	andi	r24, 0x7F	; 127
    2108:	8c 93       	st	X, r24
    210a:	0a c0       	rjmp	.+20     	; 0x2120 <EXTI_u8DisableIntChannel+0x68>
	case INT2: CLR_BIT(GICR , GICR_INT2);   break;
    210c:	ab e5       	ldi	r26, 0x5B	; 91
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	eb e5       	ldi	r30, 0x5B	; 91
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	8f 7d       	andi	r24, 0xDF	; 223
    2118:	8c 93       	st	X, r24
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <EXTI_u8DisableIntChannel+0x68>

	default: Local_u8ErrorState=NOT_OK;  break;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrorState;
    2120:	89 81       	ldd	r24, Y+1	; 0x01

}
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <EXTI_u8SetCallBack>:

uint8 EXTI_u8SetCallBack(IntChannel_t Copy_IntCh ,void (*Copy_pvCallBackFunc)(void) )
{
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	00 d0       	rcall	.+0      	; 0x2136 <EXTI_u8SetCallBack+0x6>
    2136:	00 d0       	rcall	.+0      	; 0x2138 <EXTI_u8SetCallBack+0x8>
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	8a 83       	std	Y+2, r24	; 0x02
    213e:	7c 83       	std	Y+4, r23	; 0x04
    2140:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState Local_u8ErrorState = OK ;
    2142:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL && (Copy_IntCh >= INT0 && Copy_IntCh <= INT2 ))
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	81 f0       	breq	.+32     	; 0x216c <EXTI_u8SetCallBack+0x3c>
    214c:	8a 81       	ldd	r24, Y+2	; 0x02
    214e:	83 30       	cpi	r24, 0x03	; 3
    2150:	68 f4       	brcc	.+26     	; 0x216c <EXTI_u8SetCallBack+0x3c>
	{

		EXTI_pvCallBack[Copy_IntCh] = Copy_pvCallBackFunc;
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	88 2f       	mov	r24, r24
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	88 0f       	add	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	fc 01       	movw	r30, r24
    215e:	e4 55       	subi	r30, 0x54	; 84
    2160:	fe 4f       	sbci	r31, 0xFE	; 254
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	91 83       	std	Z+1, r25	; 0x01
    2168:	80 83       	st	Z, r24
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <EXTI_u8SetCallBack+0x40>

	}
	else
	{
		Local_u8ErrorState=NULL_PTR_ERR;
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2170:	89 81       	ldd	r24, Y+1	; 0x01
}
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <__vector_1>:

/*INT0 ISR*/
__attribute__ ((signal)) void __vector_1(void);
void __vector_1(void)
{
    2180:	1f 92       	push	r1
    2182:	0f 92       	push	r0
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	0f 92       	push	r0
    2188:	11 24       	eor	r1, r1
    218a:	2f 93       	push	r18
    218c:	3f 93       	push	r19
    218e:	4f 93       	push	r20
    2190:	5f 93       	push	r21
    2192:	6f 93       	push	r22
    2194:	7f 93       	push	r23
    2196:	8f 93       	push	r24
    2198:	9f 93       	push	r25
    219a:	af 93       	push	r26
    219c:	bf 93       	push	r27
    219e:	ef 93       	push	r30
    21a0:	ff 93       	push	r31
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBack[INT0] != NULL)
    21aa:	80 91 ac 01 	lds	r24, 0x01AC
    21ae:	90 91 ad 01 	lds	r25, 0x01AD
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	29 f0       	breq	.+10     	; 0x21c0 <__vector_1+0x40>
	{
		EXTI_pvCallBack[INT0]();
    21b6:	e0 91 ac 01 	lds	r30, 0x01AC
    21ba:	f0 91 ad 01 	lds	r31, 0x01AD
    21be:	09 95       	icall
	}


}
    21c0:	cf 91       	pop	r28
    21c2:	df 91       	pop	r29
    21c4:	ff 91       	pop	r31
    21c6:	ef 91       	pop	r30
    21c8:	bf 91       	pop	r27
    21ca:	af 91       	pop	r26
    21cc:	9f 91       	pop	r25
    21ce:	8f 91       	pop	r24
    21d0:	7f 91       	pop	r23
    21d2:	6f 91       	pop	r22
    21d4:	5f 91       	pop	r21
    21d6:	4f 91       	pop	r20
    21d8:	3f 91       	pop	r19
    21da:	2f 91       	pop	r18
    21dc:	0f 90       	pop	r0
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	0f 90       	pop	r0
    21e2:	1f 90       	pop	r1
    21e4:	18 95       	reti

000021e6 <__vector_2>:

/*INT1 ISR*/
__attribute__ ((signal)) void __vector_2(void);
void __vector_2(void)
{
    21e6:	1f 92       	push	r1
    21e8:	0f 92       	push	r0
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	0f 92       	push	r0
    21ee:	11 24       	eor	r1, r1
    21f0:	2f 93       	push	r18
    21f2:	3f 93       	push	r19
    21f4:	4f 93       	push	r20
    21f6:	5f 93       	push	r21
    21f8:	6f 93       	push	r22
    21fa:	7f 93       	push	r23
    21fc:	8f 93       	push	r24
    21fe:	9f 93       	push	r25
    2200:	af 93       	push	r26
    2202:	bf 93       	push	r27
    2204:	ef 93       	push	r30
    2206:	ff 93       	push	r31
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBack[INT1] != NULL)
    2210:	80 91 ae 01 	lds	r24, 0x01AE
    2214:	90 91 af 01 	lds	r25, 0x01AF
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	29 f0       	breq	.+10     	; 0x2226 <__vector_2+0x40>
	{
		EXTI_pvCallBack[INT1]();
    221c:	e0 91 ae 01 	lds	r30, 0x01AE
    2220:	f0 91 af 01 	lds	r31, 0x01AF
    2224:	09 95       	icall
	}

}
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	ff 91       	pop	r31
    222c:	ef 91       	pop	r30
    222e:	bf 91       	pop	r27
    2230:	af 91       	pop	r26
    2232:	9f 91       	pop	r25
    2234:	8f 91       	pop	r24
    2236:	7f 91       	pop	r23
    2238:	6f 91       	pop	r22
    223a:	5f 91       	pop	r21
    223c:	4f 91       	pop	r20
    223e:	3f 91       	pop	r19
    2240:	2f 91       	pop	r18
    2242:	0f 90       	pop	r0
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	0f 90       	pop	r0
    2248:	1f 90       	pop	r1
    224a:	18 95       	reti

0000224c <__vector_3>:

/*INT2 ISR*/
__attribute__ ((signal)) void __vector_3(void);
void __vector_3(void)
{
    224c:	1f 92       	push	r1
    224e:	0f 92       	push	r0
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	0f 92       	push	r0
    2254:	11 24       	eor	r1, r1
    2256:	2f 93       	push	r18
    2258:	3f 93       	push	r19
    225a:	4f 93       	push	r20
    225c:	5f 93       	push	r21
    225e:	6f 93       	push	r22
    2260:	7f 93       	push	r23
    2262:	8f 93       	push	r24
    2264:	9f 93       	push	r25
    2266:	af 93       	push	r26
    2268:	bf 93       	push	r27
    226a:	ef 93       	push	r30
    226c:	ff 93       	push	r31
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBack[INT2] != NULL)
    2276:	80 91 b0 01 	lds	r24, 0x01B0
    227a:	90 91 b1 01 	lds	r25, 0x01B1
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	29 f0       	breq	.+10     	; 0x228c <__vector_3+0x40>
	{
		EXTI_pvCallBack[INT2]();
    2282:	e0 91 b0 01 	lds	r30, 0x01B0
    2286:	f0 91 b1 01 	lds	r31, 0x01B1
    228a:	09 95       	icall
	}

}
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	ff 91       	pop	r31
    2292:	ef 91       	pop	r30
    2294:	bf 91       	pop	r27
    2296:	af 91       	pop	r26
    2298:	9f 91       	pop	r25
    229a:	8f 91       	pop	r24
    229c:	7f 91       	pop	r23
    229e:	6f 91       	pop	r22
    22a0:	5f 91       	pop	r21
    22a2:	4f 91       	pop	r20
    22a4:	3f 91       	pop	r19
    22a6:	2f 91       	pop	r18
    22a8:	0f 90       	pop	r0
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	0f 90       	pop	r0
    22ae:	1f 90       	pop	r1
    22b0:	18 95       	reti

000022b2 <GIE_voidEnableGlobal>:
#include "GIE_register.h"
#include "GIE_interface.h"


void GIE_voidEnableGlobal(void)
{
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62

	__asm volatile ("SEI");
    22ba:	78 94       	sei

}
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <GIE_voidDisableGlobal>:
void GIE_voidDisableGlobal(void)
{
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62

	__asm volatile ("CLI");
    22ca:	f8 94       	cli
}
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <KPD_8uGetPressedKey>:
#include "KPD_config.h"
#include "KPD_private.h"


uint8 KPD_8uGetPressedKey(void)
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	a2 97       	sbiw	r28, 0x22	; 34
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8ColIdx,Local_u8RowIdx ,Local_u8PinState, Local_u8PressedKey=KPD_u8_NoPressedVal;
    22e6:	8f ef       	ldi	r24, 0xFF	; 255
    22e8:	89 83       	std	Y+1, r24	; 0x01



	uint8 Local_au8ColArr[COL_NUM]={KPD_u8COL0_PIN,KPD_u8COL1_PIN,KPD_u8COL2_PIN,KPD_u8COL3_PIN};
    22ea:	82 e0       	ldi	r24, 0x02	; 2
    22ec:	8d 83       	std	Y+5, r24	; 0x05
    22ee:	83 e0       	ldi	r24, 0x03	; 3
    22f0:	8e 83       	std	Y+6, r24	; 0x06
    22f2:	84 e0       	ldi	r24, 0x04	; 4
    22f4:	8f 83       	std	Y+7, r24	; 0x07
    22f6:	85 e0       	ldi	r24, 0x05	; 5
    22f8:	88 87       	std	Y+8, r24	; 0x08
	uint8 Local_au8ROWArr[ROW_NUM]={KPD_u8ROW0_PIN,KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN};
    22fa:	84 e0       	ldi	r24, 0x04	; 4
    22fc:	89 87       	std	Y+9, r24	; 0x09
    22fe:	85 e0       	ldi	r24, 0x05	; 5
    2300:	8a 87       	std	Y+10, r24	; 0x0a
    2302:	86 e0       	ldi	r24, 0x06	; 6
    2304:	8b 87       	std	Y+11, r24	; 0x0b
    2306:	87 e0       	ldi	r24, 0x07	; 7
    2308:	8c 87       	std	Y+12, r24	; 0x0c

	uint8 Local_au8KPDARR[ROW_NUM][COL_NUM]=KPD_au8_BUTTON_ARR;
    230a:	ce 01       	movw	r24, r28
    230c:	0d 96       	adiw	r24, 0x0d	; 13
    230e:	9f 8f       	std	Y+31, r25	; 0x1f
    2310:	8e 8f       	std	Y+30, r24	; 0x1e
    2312:	eb e8       	ldi	r30, 0x8B	; 139
    2314:	f1 e0       	ldi	r31, 0x01	; 1
    2316:	f9 a3       	std	Y+33, r31	; 0x21
    2318:	e8 a3       	std	Y+32, r30	; 0x20
    231a:	f0 e1       	ldi	r31, 0x10	; 16
    231c:	fa a3       	std	Y+34, r31	; 0x22
    231e:	e8 a1       	ldd	r30, Y+32	; 0x20
    2320:	f9 a1       	ldd	r31, Y+33	; 0x21
    2322:	00 80       	ld	r0, Z
    2324:	88 a1       	ldd	r24, Y+32	; 0x20
    2326:	99 a1       	ldd	r25, Y+33	; 0x21
    2328:	01 96       	adiw	r24, 0x01	; 1
    232a:	99 a3       	std	Y+33, r25	; 0x21
    232c:	88 a3       	std	Y+32, r24	; 0x20
    232e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2330:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2332:	00 82       	st	Z, r0
    2334:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2336:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2338:	01 96       	adiw	r24, 0x01	; 1
    233a:	9f 8f       	std	Y+31, r25	; 0x1f
    233c:	8e 8f       	std	Y+30, r24	; 0x1e
    233e:	9a a1       	ldd	r25, Y+34	; 0x22
    2340:	91 50       	subi	r25, 0x01	; 1
    2342:	9a a3       	std	Y+34, r25	; 0x22
    2344:	ea a1       	ldd	r30, Y+34	; 0x22
    2346:	ee 23       	and	r30, r30
    2348:	51 f7       	brne	.-44     	; 0x231e <KPD_8uGetPressedKey+0x4c>

	for(Local_u8ColIdx=0u ; Local_u8ColIdx < COL_NUM ; Local_u8ColIdx++)
    234a:	1b 82       	std	Y+3, r1	; 0x03
    234c:	68 c0       	rjmp	.+208    	; 0x241e <KPD_8uGetPressedKey+0x14c>
	{
		DIO_u8SetPinValue(KPD_u8COL_PORT,Local_au8ColArr[Local_u8ColIdx],DIO_u8PIN_LOW);
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	28 2f       	mov	r18, r24
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	ce 01       	movw	r24, r28
    2356:	05 96       	adiw	r24, 0x05	; 5
    2358:	fc 01       	movw	r30, r24
    235a:	e2 0f       	add	r30, r18
    235c:	f3 1f       	adc	r31, r19
    235e:	90 81       	ld	r25, Z
    2360:	83 e0       	ldi	r24, 0x03	; 3
    2362:	69 2f       	mov	r22, r25
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>


		for(Local_u8RowIdx=0u ; Local_u8RowIdx < ROW_NUM ; Local_u8RowIdx++)
    236a:	1a 82       	std	Y+2, r1	; 0x02
    236c:	43 c0       	rjmp	.+134    	; 0x23f4 <KPD_8uGetPressedKey+0x122>
		{
			DIO_u8ReadPinValue(KPD_u8ROW_PORT,Local_au8ROWArr[Local_u8RowIdx], &Local_u8PinState);
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	ce 01       	movw	r24, r28
    2376:	09 96       	adiw	r24, 0x09	; 9
    2378:	fc 01       	movw	r30, r24
    237a:	e2 0f       	add	r30, r18
    237c:	f3 1f       	adc	r31, r19
    237e:	90 81       	ld	r25, Z
    2380:	9e 01       	movw	r18, r28
    2382:	2c 5f       	subi	r18, 0xFC	; 252
    2384:	3f 4f       	sbci	r19, 0xFF	; 255
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	69 2f       	mov	r22, r25
    238a:	a9 01       	movw	r20, r18
    238c:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <DIO_u8ReadPinValue>

			if(Local_u8PinState==DIO_u8PIN_LOW)
    2390:	8c 81       	ldd	r24, Y+4	; 0x04
    2392:	88 23       	and	r24, r24
    2394:	61 f5       	brne	.+88     	; 0x23ee <KPD_8uGetPressedKey+0x11c>
			{
				Local_u8PressedKey=Local_au8KPDARR[Local_u8RowIdx][Local_u8ColIdx];
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	28 2f       	mov	r18, r24
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	48 2f       	mov	r20, r24
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	22 0f       	add	r18, r18
    23a4:	33 1f       	adc	r19, r19
    23a6:	22 0f       	add	r18, r18
    23a8:	33 1f       	adc	r19, r19
    23aa:	ce 01       	movw	r24, r28
    23ac:	01 96       	adiw	r24, 0x01	; 1
    23ae:	82 0f       	add	r24, r18
    23b0:	93 1f       	adc	r25, r19
    23b2:	84 0f       	add	r24, r20
    23b4:	95 1f       	adc	r25, r21
    23b6:	fc 01       	movw	r30, r24
    23b8:	3c 96       	adiw	r30, 0x0c	; 12
    23ba:	80 81       	ld	r24, Z
    23bc:	89 83       	std	Y+1, r24	; 0x01
    23be:	11 c0       	rjmp	.+34     	; 0x23e2 <KPD_8uGetPressedKey+0x110>
				//while(!DIO_u8ReadPinValue(KPD_u8COL_PORT,Local_au8ColArr[Local_u8RowIdx], &Local_u8PinState));


				 while(Local_u8PinState==DIO_u8PIN_LOW)
				 {
						DIO_u8ReadPinValue(KPD_u8ROW_PORT,Local_au8ROWArr[Local_u8RowIdx], &Local_u8PinState);
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	ce 01       	movw	r24, r28
    23c8:	09 96       	adiw	r24, 0x09	; 9
    23ca:	fc 01       	movw	r30, r24
    23cc:	e2 0f       	add	r30, r18
    23ce:	f3 1f       	adc	r31, r19
    23d0:	90 81       	ld	r25, Z
    23d2:	9e 01       	movw	r18, r28
    23d4:	2c 5f       	subi	r18, 0xFC	; 252
    23d6:	3f 4f       	sbci	r19, 0xFF	; 255
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	69 2f       	mov	r22, r25
    23dc:	a9 01       	movw	r20, r18
    23de:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <DIO_u8ReadPinValue>
				Local_u8PressedKey=Local_au8KPDARR[Local_u8RowIdx][Local_u8ColIdx];

				//while(!DIO_u8ReadPinValue(KPD_u8COL_PORT,Local_au8ColArr[Local_u8RowIdx], &Local_u8PinState));


				 while(Local_u8PinState==DIO_u8PIN_LOW)
    23e2:	8c 81       	ldd	r24, Y+4	; 0x04
    23e4:	88 23       	and	r24, r24
    23e6:	61 f3       	breq	.-40     	; 0x23c0 <KPD_8uGetPressedKey+0xee>
				 {
						DIO_u8ReadPinValue(KPD_u8ROW_PORT,Local_au8ROWArr[Local_u8RowIdx], &Local_u8PinState);
				 }


				return Local_u8PressedKey;
    23e8:	f9 81       	ldd	r31, Y+1	; 0x01
    23ea:	fd 8f       	std	Y+29, r31	; 0x1d
    23ec:	1e c0       	rjmp	.+60     	; 0x242a <KPD_8uGetPressedKey+0x158>
	for(Local_u8ColIdx=0u ; Local_u8ColIdx < COL_NUM ; Local_u8ColIdx++)
	{
		DIO_u8SetPinValue(KPD_u8COL_PORT,Local_au8ColArr[Local_u8ColIdx],DIO_u8PIN_LOW);


		for(Local_u8RowIdx=0u ; Local_u8RowIdx < ROW_NUM ; Local_u8RowIdx++)
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	8f 5f       	subi	r24, 0xFF	; 255
    23f2:	8a 83       	std	Y+2, r24	; 0x02
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	84 30       	cpi	r24, 0x04	; 4
    23f8:	08 f4       	brcc	.+2      	; 0x23fc <KPD_8uGetPressedKey+0x12a>
    23fa:	b9 cf       	rjmp	.-142    	; 0x236e <KPD_8uGetPressedKey+0x9c>

			}

		}

		DIO_u8SetPinValue(KPD_u8COL_PORT,Local_au8ColArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	ce 01       	movw	r24, r28
    2404:	05 96       	adiw	r24, 0x05	; 5
    2406:	fc 01       	movw	r30, r24
    2408:	e2 0f       	add	r30, r18
    240a:	f3 1f       	adc	r31, r19
    240c:	90 81       	ld	r25, Z
    240e:	83 e0       	ldi	r24, 0x03	; 3
    2410:	69 2f       	mov	r22, r25
    2412:	41 e0       	ldi	r20, 0x01	; 1
    2414:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
	uint8 Local_au8ColArr[COL_NUM]={KPD_u8COL0_PIN,KPD_u8COL1_PIN,KPD_u8COL2_PIN,KPD_u8COL3_PIN};
	uint8 Local_au8ROWArr[ROW_NUM]={KPD_u8ROW0_PIN,KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN};

	uint8 Local_au8KPDARR[ROW_NUM][COL_NUM]=KPD_au8_BUTTON_ARR;

	for(Local_u8ColIdx=0u ; Local_u8ColIdx < COL_NUM ; Local_u8ColIdx++)
    2418:	8b 81       	ldd	r24, Y+3	; 0x03
    241a:	8f 5f       	subi	r24, 0xFF	; 255
    241c:	8b 83       	std	Y+3, r24	; 0x03
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	84 30       	cpi	r24, 0x04	; 4
    2422:	08 f4       	brcc	.+2      	; 0x2426 <KPD_8uGetPressedKey+0x154>
    2424:	94 cf       	rjmp	.-216    	; 0x234e <KPD_8uGetPressedKey+0x7c>

		DIO_u8SetPinValue(KPD_u8COL_PORT,Local_au8ColArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
	}


	return Local_u8PressedKey;
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	8d 8f       	std	Y+29, r24	; 0x1d
    242a:	8d 8d       	ldd	r24, Y+29	; 0x1d



}
    242c:	a2 96       	adiw	r28, 0x22	; 34
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <LED_u8SetON>:
#include <util/delay.h>



ErrorState LED_u8SetON(const led_config_t * led_obj)
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	00 d0       	rcall	.+0      	; 0x2444 <LED_u8SetON+0x6>
    2444:	0f 92       	push	r0
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	9b 83       	std	Y+3, r25	; 0x03
    244c:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Local_u8ErrorState;
	if(NULL==led_obj)
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	9b 81       	ldd	r25, Y+3	; 0x03
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	19 f4       	brne	.+6      	; 0x245c <LED_u8SetON+0x1e>
	{
		Local_u8ErrorState=NULL_PTR_ERR;
    2456:	82 e0       	ldi	r24, 0x02	; 2
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	1f c0       	rjmp	.+62     	; 0x249a <LED_u8SetON+0x5c>
	}
	else
	{
		if(led_obj->ActiveType==ACT_HIGH)
    245c:	ea 81       	ldd	r30, Y+2	; 0x02
    245e:	fb 81       	ldd	r31, Y+3	; 0x03
    2460:	82 81       	ldd	r24, Z+2	; 0x02
    2462:	81 30       	cpi	r24, 0x01	; 1
    2464:	59 f4       	brne	.+22     	; 0x247c <LED_u8SetON+0x3e>
		DIO_u8SetPinValue(led_obj->port,led_obj->pin,DIO_u8PIN_HIGH);
    2466:	ea 81       	ldd	r30, Y+2	; 0x02
    2468:	fb 81       	ldd	r31, Y+3	; 0x03
    246a:	80 81       	ld	r24, Z
    246c:	ea 81       	ldd	r30, Y+2	; 0x02
    246e:	fb 81       	ldd	r31, Y+3	; 0x03
    2470:	91 81       	ldd	r25, Z+1	; 0x01
    2472:	69 2f       	mov	r22, r25
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
    247a:	0f c0       	rjmp	.+30     	; 0x249a <LED_u8SetON+0x5c>

		else if(led_obj->ActiveType==ACT_LOW)
    247c:	ea 81       	ldd	r30, Y+2	; 0x02
    247e:	fb 81       	ldd	r31, Y+3	; 0x03
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	88 23       	and	r24, r24
    2484:	51 f4       	brne	.+20     	; 0x249a <LED_u8SetON+0x5c>
		DIO_u8SetPinValue(led_obj->port,led_obj->pin,DIO_u8PIN_LOW);
    2486:	ea 81       	ldd	r30, Y+2	; 0x02
    2488:	fb 81       	ldd	r31, Y+3	; 0x03
    248a:	80 81       	ld	r24, Z
    248c:	ea 81       	ldd	r30, Y+2	; 0x02
    248e:	fb 81       	ldd	r31, Y+3	; 0x03
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	69 2f       	mov	r22, r25
    2494:	40 e0       	ldi	r20, 0x00	; 0
    2496:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
	}
	return Local_u8ErrorState;
    249a:	89 81       	ldd	r24, Y+1	; 0x01
}
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	08 95       	ret

000024a8 <LED_u8SetOFF>:


ErrorState LED_u8SetOFF(const led_config_t * led_obj)
{
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <LED_u8SetOFF+0x6>
    24ae:	0f 92       	push	r0
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	9b 83       	std	Y+3, r25	; 0x03
    24b6:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Local_u8ErrorState;
	if(NULL==led_obj)
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	9b 81       	ldd	r25, Y+3	; 0x03
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	19 f4       	brne	.+6      	; 0x24c6 <LED_u8SetOFF+0x1e>
	{
		Local_u8ErrorState=NULL_PTR_ERR;
    24c0:	82 e0       	ldi	r24, 0x02	; 2
    24c2:	89 83       	std	Y+1, r24	; 0x01
    24c4:	1f c0       	rjmp	.+62     	; 0x2504 <LED_u8SetOFF+0x5c>
	}
	else
	{
		if(led_obj->ActiveType==ACT_HIGH)
    24c6:	ea 81       	ldd	r30, Y+2	; 0x02
    24c8:	fb 81       	ldd	r31, Y+3	; 0x03
    24ca:	82 81       	ldd	r24, Z+2	; 0x02
    24cc:	81 30       	cpi	r24, 0x01	; 1
    24ce:	59 f4       	brne	.+22     	; 0x24e6 <LED_u8SetOFF+0x3e>
		DIO_u8SetPinValue(led_obj->port,led_obj->pin,DIO_u8PIN_LOW);
    24d0:	ea 81       	ldd	r30, Y+2	; 0x02
    24d2:	fb 81       	ldd	r31, Y+3	; 0x03
    24d4:	80 81       	ld	r24, Z
    24d6:	ea 81       	ldd	r30, Y+2	; 0x02
    24d8:	fb 81       	ldd	r31, Y+3	; 0x03
    24da:	91 81       	ldd	r25, Z+1	; 0x01
    24dc:	69 2f       	mov	r22, r25
    24de:	40 e0       	ldi	r20, 0x00	; 0
    24e0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
    24e4:	0f c0       	rjmp	.+30     	; 0x2504 <LED_u8SetOFF+0x5c>

		else if(led_obj->ActiveType==ACT_LOW)
    24e6:	ea 81       	ldd	r30, Y+2	; 0x02
    24e8:	fb 81       	ldd	r31, Y+3	; 0x03
    24ea:	82 81       	ldd	r24, Z+2	; 0x02
    24ec:	88 23       	and	r24, r24
    24ee:	51 f4       	brne	.+20     	; 0x2504 <LED_u8SetOFF+0x5c>
		DIO_u8SetPinValue(led_obj->port,led_obj->pin,DIO_u8PIN_HIGH);
    24f0:	ea 81       	ldd	r30, Y+2	; 0x02
    24f2:	fb 81       	ldd	r31, Y+3	; 0x03
    24f4:	80 81       	ld	r24, Z
    24f6:	ea 81       	ldd	r30, Y+2	; 0x02
    24f8:	fb 81       	ldd	r31, Y+3	; 0x03
    24fa:	91 81       	ldd	r25, Z+1	; 0x01
    24fc:	69 2f       	mov	r22, r25
    24fe:	41 e0       	ldi	r20, 0x01	; 1
    2500:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
	}
	return Local_u8ErrorState;
    2504:	89 81       	ldd	r24, Y+1	; 0x01
}
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <LED_u8SetToggle>:


ErrorState LED_u8SetToggle(const led_config_t * led_obj)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	00 d0       	rcall	.+0      	; 0x2518 <LED_u8SetToggle+0x6>
    2518:	0f 92       	push	r0
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	9b 83       	std	Y+3, r25	; 0x03
    2520:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Local_u8ErrorState;
	if(NULL==led_obj)
    2522:	8a 81       	ldd	r24, Y+2	; 0x02
    2524:	9b 81       	ldd	r25, Y+3	; 0x03
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	19 f4       	brne	.+6      	; 0x2530 <LED_u8SetToggle+0x1e>
	{
		Local_u8ErrorState=NULL_PTR_ERR;
    252a:	82 e0       	ldi	r24, 0x02	; 2
    252c:	89 83       	std	Y+1, r24	; 0x01
    252e:	09 c0       	rjmp	.+18     	; 0x2542 <LED_u8SetToggle+0x30>
	}
	else
	{
		DIO_u8TogglePinValue(led_obj->port,led_obj->pin);
    2530:	ea 81       	ldd	r30, Y+2	; 0x02
    2532:	fb 81       	ldd	r31, Y+3	; 0x03
    2534:	80 81       	ld	r24, Z
    2536:	ea 81       	ldd	r30, Y+2	; 0x02
    2538:	fb 81       	ldd	r31, Y+3	; 0x03
    253a:	91 81       	ldd	r25, Z+1	; 0x01
    253c:	69 2f       	mov	r22, r25
    253e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <DIO_u8TogglePinValue>
	}
	return Local_u8ErrorState;
    2542:	89 81       	ldd	r24, Y+1	; 0x01
}
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <PORT_voidInit>:




void  PORT_voidInit()
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62

	DDRA=PORTA_DIR;
    2558:	ea e3       	ldi	r30, 0x3A	; 58
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	8f ef       	ldi	r24, 0xFF	; 255
    255e:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    2560:	e7 e3       	ldi	r30, 0x37	; 55
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
    2566:	e4 e3       	ldi	r30, 0x34	; 52
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	8f ef       	ldi	r24, 0xFF	; 255
    256c:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    256e:	e1 e3       	ldi	r30, 0x31	; 49
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 e3       	ldi	r24, 0x30	; 48
    2574:	80 83       	st	Z, r24


	PORTA=PORTA_INIT_VALUE;
    2576:	eb e3       	ldi	r30, 0x3B	; 59
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	10 82       	st	Z, r1
	PORTB=PORTB_INIT_VALUE;
    257c:	e8 e3       	ldi	r30, 0x38	; 56
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	8f ef       	ldi	r24, 0xFF	; 255
    2582:	80 83       	st	Z, r24
	PORTC=PORTC_INIT_VALUE;
    2584:	e5 e3       	ldi	r30, 0x35	; 53
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	10 82       	st	Z, r1
	PORTD=PORTD_INIT_VALUE;
    258a:	e2 e3       	ldi	r30, 0x32	; 50
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	8c e7       	ldi	r24, 0x7C	; 124
    2590:	80 83       	st	Z, r24

}
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <SWITCH_u8GetState>:
#include "SWITCH_interface.h"



ErrorState SWITCH_u8GetState(const switch_config_t * switch_obj , button_state *Copy_u8State)
{
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	00 d0       	rcall	.+0      	; 0x259e <SWITCH_u8GetState+0x6>
    259e:	00 d0       	rcall	.+0      	; 0x25a0 <SWITCH_u8GetState+0x8>
    25a0:	0f 92       	push	r0
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	9b 83       	std	Y+3, r25	; 0x03
    25a8:	8a 83       	std	Y+2, r24	; 0x02
    25aa:	7d 83       	std	Y+5, r23	; 0x05
    25ac:	6c 83       	std	Y+4, r22	; 0x04
	ErrorState Local_u8ErrorState;
	if(switch_obj == NULL || Copy_u8State == NULL)
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	9b 81       	ldd	r25, Y+3	; 0x03
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	21 f0       	breq	.+8      	; 0x25be <SWITCH_u8GetState+0x26>
    25b6:	8c 81       	ldd	r24, Y+4	; 0x04
    25b8:	9d 81       	ldd	r25, Y+5	; 0x05
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	19 f4       	brne	.+6      	; 0x25c4 <SWITCH_u8GetState+0x2c>
	{
		Local_u8ErrorState=NULL_PTR_ERR;
    25be:	82 e0       	ldi	r24, 0x02	; 2
    25c0:	89 83       	std	Y+1, r24	; 0x01
    25c2:	3b c0       	rjmp	.+118    	; 0x263a <SWITCH_u8GetState+0xa2>
	}
	else
	{
		DIO_u8ReadPinValue(switch_obj->port,switch_obj->pin,Copy_u8State);
    25c4:	ea 81       	ldd	r30, Y+2	; 0x02
    25c6:	fb 81       	ldd	r31, Y+3	; 0x03
    25c8:	80 81       	ld	r24, Z
    25ca:	ea 81       	ldd	r30, Y+2	; 0x02
    25cc:	fb 81       	ldd	r31, Y+3	; 0x03
    25ce:	91 81       	ldd	r25, Z+1	; 0x01
    25d0:	2c 81       	ldd	r18, Y+4	; 0x04
    25d2:	3d 81       	ldd	r19, Y+5	; 0x05
    25d4:	69 2f       	mov	r22, r25
    25d6:	a9 01       	movw	r20, r18
    25d8:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <DIO_u8ReadPinValue>

		if(switch_obj->pull==PULL_UP)
    25dc:	ea 81       	ldd	r30, Y+2	; 0x02
    25de:	fb 81       	ldd	r31, Y+3	; 0x03
    25e0:	82 81       	ldd	r24, Z+2	; 0x02
    25e2:	88 23       	and	r24, r24
    25e4:	99 f4       	brne	.+38     	; 0x260c <SWITCH_u8GetState+0x74>
		{
			if(*Copy_u8State==DIO_u8PIN_LOW)
    25e6:	ec 81       	ldd	r30, Y+4	; 0x04
    25e8:	fd 81       	ldd	r31, Y+5	; 0x05
    25ea:	80 81       	ld	r24, Z
    25ec:	88 23       	and	r24, r24
    25ee:	21 f4       	brne	.+8      	; 0x25f8 <SWITCH_u8GetState+0x60>
			{
				*Copy_u8State=BUTTON_PRESSED;
    25f0:	ec 81       	ldd	r30, Y+4	; 0x04
    25f2:	fd 81       	ldd	r31, Y+5	; 0x05
    25f4:	10 82       	st	Z, r1
    25f6:	21 c0       	rjmp	.+66     	; 0x263a <SWITCH_u8GetState+0xa2>
			}
			else if(*Copy_u8State==DIO_u8PIN_HIGH)
    25f8:	ec 81       	ldd	r30, Y+4	; 0x04
    25fa:	fd 81       	ldd	r31, Y+5	; 0x05
    25fc:	80 81       	ld	r24, Z
    25fe:	81 30       	cpi	r24, 0x01	; 1
    2600:	e1 f4       	brne	.+56     	; 0x263a <SWITCH_u8GetState+0xa2>
			{
				*Copy_u8State=BUTTON_RELEASED;
    2602:	ec 81       	ldd	r30, Y+4	; 0x04
    2604:	fd 81       	ldd	r31, Y+5	; 0x05
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	80 83       	st	Z, r24
    260a:	17 c0       	rjmp	.+46     	; 0x263a <SWITCH_u8GetState+0xa2>
			}
		}

		else if (switch_obj->pull==PULL_DOWN)
    260c:	ea 81       	ldd	r30, Y+2	; 0x02
    260e:	fb 81       	ldd	r31, Y+3	; 0x03
    2610:	82 81       	ldd	r24, Z+2	; 0x02
    2612:	81 30       	cpi	r24, 0x01	; 1
    2614:	91 f4       	brne	.+36     	; 0x263a <SWITCH_u8GetState+0xa2>
		{

			if(*Copy_u8State==DIO_u8PIN_HIGH)
    2616:	ec 81       	ldd	r30, Y+4	; 0x04
    2618:	fd 81       	ldd	r31, Y+5	; 0x05
    261a:	80 81       	ld	r24, Z
    261c:	81 30       	cpi	r24, 0x01	; 1
    261e:	21 f4       	brne	.+8      	; 0x2628 <SWITCH_u8GetState+0x90>
			{
				*Copy_u8State=BUTTON_PRESSED;
    2620:	ec 81       	ldd	r30, Y+4	; 0x04
    2622:	fd 81       	ldd	r31, Y+5	; 0x05
    2624:	10 82       	st	Z, r1
    2626:	09 c0       	rjmp	.+18     	; 0x263a <SWITCH_u8GetState+0xa2>
			}

			else if(*Copy_u8State==DIO_u8PIN_LOW)
    2628:	ec 81       	ldd	r30, Y+4	; 0x04
    262a:	fd 81       	ldd	r31, Y+5	; 0x05
    262c:	80 81       	ld	r24, Z
    262e:	88 23       	and	r24, r24
    2630:	21 f4       	brne	.+8      	; 0x263a <SWITCH_u8GetState+0xa2>
			{
				*Copy_u8State=BUTTON_RELEASED;
    2632:	ec 81       	ldd	r30, Y+4	; 0x04
    2634:	fd 81       	ldd	r31, Y+5	; 0x05
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	80 83       	st	Z, r24
			}
		}

	}

	return Local_u8ErrorState;
    263a:	89 81       	ldd	r24, Y+1	; 0x01
}
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <main>:
uint8 countdelay=90;

uint8 r=0;

void main(void)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    2654:	e7 97       	sbiw	r28, 0x37	; 55
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61


	PORT_voidInit();
    2660:	0e 94 a8 12 	call	0x2550	; 0x2550 <PORT_voidInit>
	CLCD_voidInit();
    2664:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_voidInit>

	EXTI_u8SetCallBack(INT2, &int2_func);
    2668:	20 e9       	ldi	r18, 0x90	; 144
    266a:	35 e1       	ldi	r19, 0x15	; 21
    266c:	82 e0       	ldi	r24, 0x02	; 2
    266e:	b9 01       	movw	r22, r18
    2670:	0e 94 98 10 	call	0x2130	; 0x2130 <EXTI_u8SetCallBack>
	EXTI_u8SetCallBack(INT0, &int0_func);
    2674:	2d e9       	ldi	r18, 0x9D	; 157
    2676:	35 e1       	ldi	r19, 0x15	; 21
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	b9 01       	movw	r22, r18
    267c:	0e 94 98 10 	call	0x2130	; 0x2130 <EXTI_u8SetCallBack>
	EXTI_u8EnableIntChannel(INT2);
    2680:	82 e0       	ldi	r24, 0x02	; 2
    2682:	0e 94 20 10 	call	0x2040	; 0x2040 <EXTI_u8EnableIntChannel>
	EXTI_u8SetSenceCtrl(INT2,RISING_EDGE);
    2686:	82 e0       	ldi	r24, 0x02	; 2
    2688:	63 e0       	ldi	r22, 0x03	; 3
    268a:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <EXTI_u8SetSenceCtrl>
	EXTI_u8EnableIntChannel(INT0);
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	0e 94 20 10 	call	0x2040	; 0x2040 <EXTI_u8EnableIntChannel>
	EXTI_u8SetSenceCtrl(INT0,RISING_EDGE);
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	63 e0       	ldi	r22, 0x03	; 3
    2698:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <EXTI_u8SetSenceCtrl>

	GIE_voidEnableGlobal();
    269c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <GIE_voidEnableGlobal>
			0b11100,
			0b11100,
			0b11100,
			0b11100,
			0b11100
	};
    26a0:	ae 01       	movw	r20, r28
    26a2:	42 5e       	subi	r20, 0xE2	; 226
    26a4:	5f 4f       	sbci	r21, 0xFF	; 255
    26a6:	5f a7       	std	Y+47, r21	; 0x2f
    26a8:	4e a7       	std	Y+46, r20	; 0x2e
    26aa:	83 ea       	ldi	r24, 0xA3	; 163
    26ac:	91 e0       	ldi	r25, 0x01	; 1
    26ae:	99 ab       	std	Y+49, r25	; 0x31
    26b0:	88 ab       	std	Y+48, r24	; 0x30
    26b2:	98 e0       	ldi	r25, 0x08	; 8
    26b4:	9a ab       	std	Y+50, r25	; 0x32
    26b6:	e8 a9       	ldd	r30, Y+48	; 0x30
    26b8:	f9 a9       	ldd	r31, Y+49	; 0x31
    26ba:	00 80       	ld	r0, Z
    26bc:	48 a9       	ldd	r20, Y+48	; 0x30
    26be:	59 a9       	ldd	r21, Y+49	; 0x31
    26c0:	4f 5f       	subi	r20, 0xFF	; 255
    26c2:	5f 4f       	sbci	r21, 0xFF	; 255
    26c4:	59 ab       	std	Y+49, r21	; 0x31
    26c6:	48 ab       	std	Y+48, r20	; 0x30
    26c8:	ee a5       	ldd	r30, Y+46	; 0x2e
    26ca:	ff a5       	ldd	r31, Y+47	; 0x2f
    26cc:	00 82       	st	Z, r0
    26ce:	4e a5       	ldd	r20, Y+46	; 0x2e
    26d0:	5f a5       	ldd	r21, Y+47	; 0x2f
    26d2:	4f 5f       	subi	r20, 0xFF	; 255
    26d4:	5f 4f       	sbci	r21, 0xFF	; 255
    26d6:	5f a7       	std	Y+47, r21	; 0x2f
    26d8:	4e a7       	std	Y+46, r20	; 0x2e
    26da:	5a a9       	ldd	r21, Y+50	; 0x32
    26dc:	51 50       	subi	r21, 0x01	; 1
    26de:	5a ab       	std	Y+50, r21	; 0x32
    26e0:	8a a9       	ldd	r24, Y+50	; 0x32
    26e2:	88 23       	and	r24, r24
    26e4:	41 f7       	brne	.-48     	; 0x26b6 <main+0x6a>
			0b01111,
			0b01111,
			0b01111,
			0b00000,
			0b00000
	};
    26e6:	fe 01       	movw	r30, r28
    26e8:	b6 96       	adiw	r30, 0x26	; 38
    26ea:	fc ab       	std	Y+52, r31	; 0x34
    26ec:	eb ab       	std	Y+51, r30	; 0x33
    26ee:	4b e9       	ldi	r20, 0x9B	; 155
    26f0:	51 e0       	ldi	r21, 0x01	; 1
    26f2:	5e ab       	std	Y+54, r21	; 0x36
    26f4:	4d ab       	std	Y+53, r20	; 0x35
    26f6:	58 e0       	ldi	r21, 0x08	; 8
    26f8:	5f ab       	std	Y+55, r21	; 0x37
    26fa:	ed a9       	ldd	r30, Y+53	; 0x35
    26fc:	fe a9       	ldd	r31, Y+54	; 0x36
    26fe:	00 80       	ld	r0, Z
    2700:	4d a9       	ldd	r20, Y+53	; 0x35
    2702:	5e a9       	ldd	r21, Y+54	; 0x36
    2704:	4f 5f       	subi	r20, 0xFF	; 255
    2706:	5f 4f       	sbci	r21, 0xFF	; 255
    2708:	5e ab       	std	Y+54, r21	; 0x36
    270a:	4d ab       	std	Y+53, r20	; 0x35
    270c:	eb a9       	ldd	r30, Y+51	; 0x33
    270e:	fc a9       	ldd	r31, Y+52	; 0x34
    2710:	00 82       	st	Z, r0
    2712:	4b a9       	ldd	r20, Y+51	; 0x33
    2714:	5c a9       	ldd	r21, Y+52	; 0x34
    2716:	4f 5f       	subi	r20, 0xFF	; 255
    2718:	5f 4f       	sbci	r21, 0xFF	; 255
    271a:	5c ab       	std	Y+52, r21	; 0x34
    271c:	4b ab       	std	Y+51, r20	; 0x33
    271e:	5f a9       	ldd	r21, Y+55	; 0x37
    2720:	51 50       	subi	r21, 0x01	; 1
    2722:	5f ab       	std	Y+55, r21	; 0x37
    2724:	8f a9       	ldd	r24, Y+55	; 0x37
    2726:	88 23       	and	r24, r24
    2728:	41 f7       	brne	.-48     	; 0x26fa <main+0xae>
	uint8 i;


	while(1)
	{
		if(flag2==1)
    272a:	80 91 88 01 	lds	r24, 0x0188
    272e:	81 30       	cpi	r24, 0x01	; 1
    2730:	e1 f7       	brne	.-8      	; 0x272a <main+0xde>
		{
			if(counter>0)
    2732:	80 91 87 01 	lds	r24, 0x0187
    2736:	88 23       	and	r24, r24
    2738:	09 f4       	brne	.+2      	; 0x273c <main+0xf0>
    273a:	e8 c1       	rjmp	.+976    	; 0x2b0c <main+0x4c0>
			{

				if(counter2==1)
    273c:	80 91 b2 01 	lds	r24, 0x01B2
    2740:	81 30       	cpi	r24, 0x01	; 1
    2742:	09 f0       	breq	.+2      	; 0x2746 <main+0xfa>
    2744:	d6 c0       	rjmp	.+428    	; 0x28f2 <main+0x2a6>
				{
					if(y==1)
    2746:	80 91 86 01 	lds	r24, 0x0186
    274a:	81 30       	cpi	r24, 0x01	; 1
    274c:	21 f4       	brne	.+8      	; 0x2756 <main+0x10a>
					{
						y=2;
    274e:	82 e0       	ldi	r24, 0x02	; 2
    2750:	80 93 86 01 	sts	0x0186, r24
    2754:	07 c0       	rjmp	.+14     	; 0x2764 <main+0x118>
					}
					else if(y==2)
    2756:	80 91 86 01 	lds	r24, 0x0186
    275a:	82 30       	cpi	r24, 0x02	; 2
    275c:	19 f4       	brne	.+6      	; 0x2764 <main+0x118>
					{
						y=1;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	80 93 86 01 	sts	0x0186, r24
					}
					for(i=16;i>=2;i--)
    2764:	80 e1       	ldi	r24, 0x10	; 16
    2766:	8d 8f       	std	Y+29, r24	; 0x1d
    2768:	c0 c0       	rjmp	.+384    	; 0x28ea <main+0x29e>
					{


						CLCD_u8SendSpecialCharacter(x,Paddle_1,x,1);
    276a:	80 91 85 01 	lds	r24, 0x0185
    276e:	90 91 85 01 	lds	r25, 0x0185
    2772:	9e 01       	movw	r18, r28
    2774:	22 5e       	subi	r18, 0xE2	; 226
    2776:	3f 4f       	sbci	r19, 0xFF	; 255
    2778:	b9 01       	movw	r22, r18
    277a:	49 2f       	mov	r20, r25
    277c:	21 e0       	ldi	r18, 0x01	; 1
    277e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <CLCD_u8SendSpecialCharacter>


						CLCD_u8SendSpecialCharacter(3,BALL,y,i);
    2782:	90 91 86 01 	lds	r25, 0x0186
    2786:	9e 01       	movw	r18, r28
    2788:	2a 5d       	subi	r18, 0xDA	; 218
    278a:	3f 4f       	sbci	r19, 0xFF	; 255
    278c:	83 e0       	ldi	r24, 0x03	; 3
    278e:	b9 01       	movw	r22, r18
    2790:	49 2f       	mov	r20, r25
    2792:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2794:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <CLCD_u8SendSpecialCharacter>

						_delay_ms(countdelay);
    2798:	80 91 8a 01 	lds	r24, 0x018A
    279c:	88 2f       	mov	r24, r24
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	a0 e0       	ldi	r26, 0x00	; 0
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	89 8f       	std	Y+25, r24	; 0x19
    27b2:	9a 8f       	std	Y+26, r25	; 0x1a
    27b4:	ab 8f       	std	Y+27, r26	; 0x1b
    27b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
 _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b8:	69 8d       	ldd	r22, Y+25	; 0x19
    27ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	4a e7       	ldi	r20, 0x7A	; 122
    27c6:	55 e4       	ldi	r21, 0x45	; 69
    27c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	8d 8b       	std	Y+21, r24	; 0x15
    27d2:	9e 8b       	std	Y+22, r25	; 0x16
    27d4:	af 8b       	std	Y+23, r26	; 0x17
    27d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27d8:	6d 89       	ldd	r22, Y+21	; 0x15
    27da:	7e 89       	ldd	r23, Y+22	; 0x16
    27dc:	8f 89       	ldd	r24, Y+23	; 0x17
    27de:	98 8d       	ldd	r25, Y+24	; 0x18
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e8       	ldi	r20, 0x80	; 128
    27e6:	5f e3       	ldi	r21, 0x3F	; 63
    27e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ec:	88 23       	and	r24, r24
    27ee:	2c f4       	brge	.+10     	; 0x27fa <main+0x1ae>
		__ticks = 1;
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	9c 8b       	std	Y+20, r25	; 0x14
    27f6:	8b 8b       	std	Y+19, r24	; 0x13
    27f8:	3f c0       	rjmp	.+126    	; 0x2878 <main+0x22c>
	else if (__tmp > 65535)
    27fa:	6d 89       	ldd	r22, Y+21	; 0x15
    27fc:	7e 89       	ldd	r23, Y+22	; 0x16
    27fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2800:	98 8d       	ldd	r25, Y+24	; 0x18
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	3f ef       	ldi	r19, 0xFF	; 255
    2806:	4f e7       	ldi	r20, 0x7F	; 127
    2808:	57 e4       	ldi	r21, 0x47	; 71
    280a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    280e:	18 16       	cp	r1, r24
    2810:	4c f5       	brge	.+82     	; 0x2864 <main+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2812:	69 8d       	ldd	r22, Y+25	; 0x19
    2814:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2816:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2818:	9c 8d       	ldd	r25, Y+28	; 0x1c
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e2       	ldi	r20, 0x20	; 32
    2820:	51 e4       	ldi	r21, 0x41	; 65
    2822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	bc 01       	movw	r22, r24
    282c:	cd 01       	movw	r24, r26
    282e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9c 8b       	std	Y+20, r25	; 0x14
    2838:	8b 8b       	std	Y+19, r24	; 0x13
    283a:	0f c0       	rjmp	.+30     	; 0x285a <main+0x20e>
    283c:	80 e9       	ldi	r24, 0x90	; 144
    283e:	91 e0       	ldi	r25, 0x01	; 1
    2840:	9a 8b       	std	Y+18, r25	; 0x12
    2842:	89 8b       	std	Y+17, r24	; 0x11
    2844:	89 89       	ldd	r24, Y+17	; 0x11
    2846:	9a 89       	ldd	r25, Y+18	; 0x12
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <main+0x1fc>
    284c:	9a 8b       	std	Y+18, r25	; 0x12
    284e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2850:	8b 89       	ldd	r24, Y+19	; 0x13
    2852:	9c 89       	ldd	r25, Y+20	; 0x14
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	9c 8b       	std	Y+20, r25	; 0x14
    2858:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285a:	8b 89       	ldd	r24, Y+19	; 0x13
    285c:	9c 89       	ldd	r25, Y+20	; 0x14
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	69 f7       	brne	.-38     	; 0x283c <main+0x1f0>
    2862:	14 c0       	rjmp	.+40     	; 0x288c <main+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2864:	6d 89       	ldd	r22, Y+21	; 0x15
    2866:	7e 89       	ldd	r23, Y+22	; 0x16
    2868:	8f 89       	ldd	r24, Y+23	; 0x17
    286a:	98 8d       	ldd	r25, Y+24	; 0x18
    286c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	9c 8b       	std	Y+20, r25	; 0x14
    2876:	8b 8b       	std	Y+19, r24	; 0x13
    2878:	8b 89       	ldd	r24, Y+19	; 0x13
    287a:	9c 89       	ldd	r25, Y+20	; 0x14
    287c:	98 8b       	std	Y+16, r25	; 0x10
    287e:	8f 87       	std	Y+15, r24	; 0x0f
    2880:	8f 85       	ldd	r24, Y+15	; 0x0f
    2882:	98 89       	ldd	r25, Y+16	; 0x10
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <main+0x238>
    2888:	98 8b       	std	Y+16, r25	; 0x10
    288a:	8f 87       	std	Y+15, r24	; 0x0f


						SWITCH_u8GetState(&switch1,&state);
    288c:	82 e8       	ldi	r24, 0x82	; 130
    288e:	91 e0       	ldi	r25, 0x01	; 1
    2890:	24 eb       	ldi	r18, 0xB4	; 180
    2892:	31 e0       	ldi	r19, 0x01	; 1
    2894:	b9 01       	movw	r22, r18
    2896:	0e 94 cc 12 	call	0x2598	; 0x2598 <SWITCH_u8GetState>
						if(state==BUTTON_PRESSED)
    289a:	80 91 b4 01 	lds	r24, 0x01B4
    289e:	88 23       	and	r24, r24
    28a0:	d9 f4       	brne	.+54     	; 0x28d8 <main+0x28c>
						{
							if(x==1)
    28a2:	80 91 85 01 	lds	r24, 0x0185
    28a6:	81 30       	cpi	r24, 0x01	; 1
    28a8:	51 f4       	brne	.+20     	; 0x28be <main+0x272>
							{
								CLCD_voidSendDataPos(x,1,' ');
    28aa:	80 91 85 01 	lds	r24, 0x0185
    28ae:	61 e0       	ldi	r22, 0x01	; 1
    28b0:	40 e2       	ldi	r20, 0x20	; 32
    28b2:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidSendDataPos>
								x=2;
    28b6:	82 e0       	ldi	r24, 0x02	; 2
    28b8:	80 93 85 01 	sts	0x0185, r24
    28bc:	0d c0       	rjmp	.+26     	; 0x28d8 <main+0x28c>
							}
							else if(x==2)
    28be:	80 91 85 01 	lds	r24, 0x0185
    28c2:	82 30       	cpi	r24, 0x02	; 2
    28c4:	49 f4       	brne	.+18     	; 0x28d8 <main+0x28c>
							{
								CLCD_voidSendDataPos(x,1,' ');
    28c6:	80 91 85 01 	lds	r24, 0x0185
    28ca:	61 e0       	ldi	r22, 0x01	; 1
    28cc:	40 e2       	ldi	r20, 0x20	; 32
    28ce:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidSendDataPos>
								x=1;
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	80 93 85 01 	sts	0x0185, r24
							}
						}

						CLCD_voidSendDataPos(y,i,' ');
    28d8:	80 91 86 01 	lds	r24, 0x0186
    28dc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    28de:	40 e2       	ldi	r20, 0x20	; 32
    28e0:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidSendDataPos>
					}
					else if(y==2)
					{
						y=1;
					}
					for(i=16;i>=2;i--)
    28e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28e6:	81 50       	subi	r24, 0x01	; 1
    28e8:	8d 8f       	std	Y+29, r24	; 0x1d
    28ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ec:	82 30       	cpi	r24, 0x02	; 2
    28ee:	08 f0       	brcs	.+2      	; 0x28f2 <main+0x2a6>
    28f0:	3c cf       	rjmp	.-392    	; 0x276a <main+0x11e>
					}


				}

				if(y!=x)
    28f2:	90 91 86 01 	lds	r25, 0x0186
    28f6:	80 91 85 01 	lds	r24, 0x0185
    28fa:	98 17       	cp	r25, r24
    28fc:	a1 f0       	breq	.+40     	; 0x2926 <main+0x2da>
				{

					CLCD_voidSendCommand(CLCD_CLEAR);
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	0e 94 c4 07 	call	0xf88	; 0xf88 <CLCD_voidSendCommand>
					CLCD_voidSendStringPos(1,3,"Player 2 Won");
    2904:	20 e6       	ldi	r18, 0x60	; 96
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	63 e0       	ldi	r22, 0x03	; 3
    290c:	a9 01       	movw	r20, r18
    290e:	0e 94 b3 08 	call	0x1166	; 0x1166 <CLCD_voidSendStringPos>
					DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_HIGH);
    2912:	82 e0       	ldi	r24, 0x02	; 2
    2914:	61 e0       	ldi	r22, 0x01	; 1
    2916:	41 e0       	ldi	r20, 0x01	; 1
    2918:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>

					flag=0;
    291c:	10 92 89 01 	sts	0x0189, r1
					flag2=0;
    2920:	10 92 88 01 	sts	0x0188, r1
    2924:	05 c0       	rjmp	.+10     	; 0x2930 <main+0x2e4>
				}
				else
				{
					DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_LOW);
    2926:	82 e0       	ldi	r24, 0x02	; 2
    2928:	61 e0       	ldi	r22, 0x01	; 1
    292a:	40 e0       	ldi	r20, 0x00	; 0
    292c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>

				}
				if(flag==1)
    2930:	80 91 89 01 	lds	r24, 0x0189
    2934:	81 30       	cpi	r24, 0x01	; 1
    2936:	09 f0       	breq	.+2      	; 0x293a <main+0x2ee>
    2938:	e9 c0       	rjmp	.+466    	; 0x2b0c <main+0x4c0>
				{
					CLCD_u8SendSpecialCharacter(x,Paddle_1,x,1);
    293a:	80 91 85 01 	lds	r24, 0x0185
    293e:	90 91 85 01 	lds	r25, 0x0185
    2942:	9e 01       	movw	r18, r28
    2944:	22 5e       	subi	r18, 0xE2	; 226
    2946:	3f 4f       	sbci	r19, 0xFF	; 255
    2948:	b9 01       	movw	r22, r18
    294a:	49 2f       	mov	r20, r25
    294c:	21 e0       	ldi	r18, 0x01	; 1
    294e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <CLCD_u8SendSpecialCharacter>

					if(countdelay>30)
    2952:	80 91 8a 01 	lds	r24, 0x018A
    2956:	8f 31       	cpi	r24, 0x1F	; 31
    2958:	b0 f0       	brcs	.+44     	; 0x2986 <main+0x33a>
					{
						countdelay=(90-30*r);
    295a:	80 91 b3 01 	lds	r24, 0x01B3
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	82 ee       	ldi	r24, 0xE2	; 226
    2964:	9f ef       	ldi	r25, 0xFF	; 255
    2966:	fc 01       	movw	r30, r24
    2968:	2e 9f       	mul	r18, r30
    296a:	c0 01       	movw	r24, r0
    296c:	2f 9f       	mul	r18, r31
    296e:	90 0d       	add	r25, r0
    2970:	3e 9f       	mul	r19, r30
    2972:	90 0d       	add	r25, r0
    2974:	11 24       	eor	r1, r1
    2976:	86 5a       	subi	r24, 0xA6	; 166
    2978:	80 93 8a 01 	sts	0x018A, r24
						r++;
    297c:	80 91 b3 01 	lds	r24, 0x01B3
    2980:	8f 5f       	subi	r24, 0xFF	; 255
    2982:	80 93 b3 01 	sts	0x01B3, r24
					}
					for(i=2;i<=16;i++)
    2986:	82 e0       	ldi	r24, 0x02	; 2
    2988:	8d 8f       	std	Y+29, r24	; 0x1d
    298a:	b4 c0       	rjmp	.+360    	; 0x2af4 <main+0x4a8>
					{

						CLCD_u8SendSpecialCharacter(3,BALL,y,i);
    298c:	90 91 86 01 	lds	r25, 0x0186
    2990:	9e 01       	movw	r18, r28
    2992:	2a 5d       	subi	r18, 0xDA	; 218
    2994:	3f 4f       	sbci	r19, 0xFF	; 255
    2996:	83 e0       	ldi	r24, 0x03	; 3
    2998:	b9 01       	movw	r22, r18
    299a:	49 2f       	mov	r20, r25
    299c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    299e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <CLCD_u8SendSpecialCharacter>

						_delay_ms(countdelay);
    29a2:	80 91 8a 01 	lds	r24, 0x018A
    29a6:	88 2f       	mov	r24, r24
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	a0 e0       	ldi	r26, 0x00	; 0
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	bc 01       	movw	r22, r24
    29b0:	cd 01       	movw	r24, r26
    29b2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	8b 87       	std	Y+11, r24	; 0x0b
    29bc:	9c 87       	std	Y+12, r25	; 0x0c
    29be:	ad 87       	std	Y+13, r26	; 0x0d
    29c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
 _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	4a e7       	ldi	r20, 0x7A	; 122
    29d0:	55 e4       	ldi	r21, 0x45	; 69
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	8f 83       	std	Y+7, r24	; 0x07
    29dc:	98 87       	std	Y+8, r25	; 0x08
    29de:	a9 87       	std	Y+9, r26	; 0x09
    29e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29e2:	6f 81       	ldd	r22, Y+7	; 0x07
    29e4:	78 85       	ldd	r23, Y+8	; 0x08
    29e6:	89 85       	ldd	r24, Y+9	; 0x09
    29e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	2c f4       	brge	.+10     	; 0x2a04 <main+0x3b8>
		__ticks = 1;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
    2a02:	3f c0       	rjmp	.+126    	; 0x2a82 <main+0x436>
	else if (__tmp > 65535)
    2a04:	6f 81       	ldd	r22, Y+7	; 0x07
    2a06:	78 85       	ldd	r23, Y+8	; 0x08
    2a08:	89 85       	ldd	r24, Y+9	; 0x09
    2a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	3f ef       	ldi	r19, 0xFF	; 255
    2a10:	4f e7       	ldi	r20, 0x7F	; 127
    2a12:	57 e4       	ldi	r21, 0x47	; 71
    2a14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a18:	18 16       	cp	r1, r24
    2a1a:	4c f5       	brge	.+82     	; 0x2a6e <main+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e2       	ldi	r20, 0x20	; 32
    2a2a:	51 e4       	ldi	r21, 0x41	; 65
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	bc 01       	movw	r22, r24
    2a36:	cd 01       	movw	r24, r26
    2a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	9e 83       	std	Y+6, r25	; 0x06
    2a42:	8d 83       	std	Y+5, r24	; 0x05
    2a44:	0f c0       	rjmp	.+30     	; 0x2a64 <main+0x418>
    2a46:	80 e9       	ldi	r24, 0x90	; 144
    2a48:	91 e0       	ldi	r25, 0x01	; 1
    2a4a:	9c 83       	std	Y+4, r25	; 0x04
    2a4c:	8b 83       	std	Y+3, r24	; 0x03
    2a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a50:	9c 81       	ldd	r25, Y+4	; 0x04
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <main+0x406>
    2a56:	9c 83       	std	Y+4, r25	; 0x04
    2a58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	9e 83       	std	Y+6, r25	; 0x06
    2a62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a64:	8d 81       	ldd	r24, Y+5	; 0x05
    2a66:	9e 81       	ldd	r25, Y+6	; 0x06
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	69 f7       	brne	.-38     	; 0x2a46 <main+0x3fa>
    2a6c:	14 c0       	rjmp	.+40     	; 0x2a96 <main+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a70:	78 85       	ldd	r23, Y+8	; 0x08
    2a72:	89 85       	ldd	r24, Y+9	; 0x09
    2a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9e 83       	std	Y+6, r25	; 0x06
    2a80:	8d 83       	std	Y+5, r24	; 0x05
    2a82:	8d 81       	ldd	r24, Y+5	; 0x05
    2a84:	9e 81       	ldd	r25, Y+6	; 0x06
    2a86:	9a 83       	std	Y+2, r25	; 0x02
    2a88:	89 83       	std	Y+1, r24	; 0x01
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <main+0x442>
    2a92:	9a 83       	std	Y+2, r25	; 0x02
    2a94:	89 83       	std	Y+1, r24	; 0x01



						SWITCH_u8GetState(&switch1,&state);
    2a96:	82 e8       	ldi	r24, 0x82	; 130
    2a98:	91 e0       	ldi	r25, 0x01	; 1
    2a9a:	24 eb       	ldi	r18, 0xB4	; 180
    2a9c:	31 e0       	ldi	r19, 0x01	; 1
    2a9e:	b9 01       	movw	r22, r18
    2aa0:	0e 94 cc 12 	call	0x2598	; 0x2598 <SWITCH_u8GetState>
						if(state==BUTTON_PRESSED)
    2aa4:	80 91 b4 01 	lds	r24, 0x01B4
    2aa8:	88 23       	and	r24, r24
    2aaa:	d9 f4       	brne	.+54     	; 0x2ae2 <main+0x496>
						{
							if(x==1)
    2aac:	80 91 85 01 	lds	r24, 0x0185
    2ab0:	81 30       	cpi	r24, 0x01	; 1
    2ab2:	51 f4       	brne	.+20     	; 0x2ac8 <main+0x47c>
							{
								CLCD_voidSendDataPos(x,1,' ');
    2ab4:	80 91 85 01 	lds	r24, 0x0185
    2ab8:	61 e0       	ldi	r22, 0x01	; 1
    2aba:	40 e2       	ldi	r20, 0x20	; 32
    2abc:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidSendDataPos>
								x=2;
    2ac0:	82 e0       	ldi	r24, 0x02	; 2
    2ac2:	80 93 85 01 	sts	0x0185, r24
    2ac6:	0d c0       	rjmp	.+26     	; 0x2ae2 <main+0x496>
							}
							else if(x==2)
    2ac8:	80 91 85 01 	lds	r24, 0x0185
    2acc:	82 30       	cpi	r24, 0x02	; 2
    2ace:	49 f4       	brne	.+18     	; 0x2ae2 <main+0x496>
							{
								CLCD_voidSendDataPos(x,1,' ');
    2ad0:	80 91 85 01 	lds	r24, 0x0185
    2ad4:	61 e0       	ldi	r22, 0x01	; 1
    2ad6:	40 e2       	ldi	r20, 0x20	; 32
    2ad8:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidSendDataPos>
								x=1;
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	80 93 85 01 	sts	0x0185, r24
							}
						}
						CLCD_voidSendDataPos(y,i,' ');
    2ae2:	80 91 86 01 	lds	r24, 0x0186
    2ae6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2ae8:	40 e2       	ldi	r20, 0x20	; 32
    2aea:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidSendDataPos>
					if(countdelay>30)
					{
						countdelay=(90-30*r);
						r++;
					}
					for(i=2;i<=16;i++)
    2aee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2af0:	8f 5f       	subi	r24, 0xFF	; 255
    2af2:	8d 8f       	std	Y+29, r24	; 0x1d
    2af4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2af6:	81 31       	cpi	r24, 0x11	; 17
    2af8:	08 f4       	brcc	.+2      	; 0x2afc <main+0x4b0>
    2afa:	48 cf       	rjmp	.-368    	; 0x298c <main+0x340>
						}
						CLCD_voidSendDataPos(y,i,' ');

					}

					if(i==17)
    2afc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2afe:	81 31       	cpi	r24, 0x11	; 17
    2b00:	29 f4       	brne	.+10     	; 0x2b0c <main+0x4c0>
					{
						DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_HIGH);
    2b02:	82 e0       	ldi	r24, 0x02	; 2
    2b04:	60 e0       	ldi	r22, 0x00	; 0
    2b06:	41 e0       	ldi	r20, 0x01	; 1
    2b08:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
					}


				}
			}
			counter=0;
    2b0c:	10 92 87 01 	sts	0x0187, r1
			counter2=0;
    2b10:	10 92 b2 01 	sts	0x01B2, r1

			DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_LOW);
    2b14:	82 e0       	ldi	r24, 0x02	; 2
    2b16:	60 e0       	ldi	r22, 0x00	; 0
    2b18:	40 e0       	ldi	r20, 0x00	; 0
    2b1a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <DIO_u8SetPinValue>
    2b1e:	05 ce       	rjmp	.-1014   	; 0x272a <main+0xde>

00002b20 <int2_func>:
	}
}


void int2_func(void)
{
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
	counter=1;
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	80 93 87 01 	sts	0x0187, r24
	counter2=1;
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	80 93 b2 01 	sts	0x01B2, r24
}
    2b34:	cf 91       	pop	r28
    2b36:	df 91       	pop	r29
    2b38:	08 95       	ret

00002b3a <int0_func>:
void int0_func(void)
{
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLCD_CLEAR);
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	0e 94 c4 07 	call	0xf88	; 0xf88 <CLCD_voidSendCommand>
	CLCD_voidSendStringPos(1,3,"Player 1 Won");
    2b48:	2d e6       	ldi	r18, 0x6D	; 109
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	63 e0       	ldi	r22, 0x03	; 3
    2b50:	a9 01       	movw	r20, r18
    2b52:	0e 94 b3 08 	call	0x1166	; 0x1166 <CLCD_voidSendStringPos>
}
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <__mulsi3>:
    2b5c:	62 9f       	mul	r22, r18
    2b5e:	d0 01       	movw	r26, r0
    2b60:	73 9f       	mul	r23, r19
    2b62:	f0 01       	movw	r30, r0
    2b64:	82 9f       	mul	r24, r18
    2b66:	e0 0d       	add	r30, r0
    2b68:	f1 1d       	adc	r31, r1
    2b6a:	64 9f       	mul	r22, r20
    2b6c:	e0 0d       	add	r30, r0
    2b6e:	f1 1d       	adc	r31, r1
    2b70:	92 9f       	mul	r25, r18
    2b72:	f0 0d       	add	r31, r0
    2b74:	83 9f       	mul	r24, r19
    2b76:	f0 0d       	add	r31, r0
    2b78:	74 9f       	mul	r23, r20
    2b7a:	f0 0d       	add	r31, r0
    2b7c:	65 9f       	mul	r22, r21
    2b7e:	f0 0d       	add	r31, r0
    2b80:	99 27       	eor	r25, r25
    2b82:	72 9f       	mul	r23, r18
    2b84:	b0 0d       	add	r27, r0
    2b86:	e1 1d       	adc	r30, r1
    2b88:	f9 1f       	adc	r31, r25
    2b8a:	63 9f       	mul	r22, r19
    2b8c:	b0 0d       	add	r27, r0
    2b8e:	e1 1d       	adc	r30, r1
    2b90:	f9 1f       	adc	r31, r25
    2b92:	bd 01       	movw	r22, r26
    2b94:	cf 01       	movw	r24, r30
    2b96:	11 24       	eor	r1, r1
    2b98:	08 95       	ret

00002b9a <__divmodsi4>:
    2b9a:	97 fb       	bst	r25, 7
    2b9c:	09 2e       	mov	r0, r25
    2b9e:	05 26       	eor	r0, r21
    2ba0:	0e d0       	rcall	.+28     	; 0x2bbe <__divmodsi4_neg1>
    2ba2:	57 fd       	sbrc	r21, 7
    2ba4:	04 d0       	rcall	.+8      	; 0x2bae <__divmodsi4_neg2>
    2ba6:	14 d0       	rcall	.+40     	; 0x2bd0 <__udivmodsi4>
    2ba8:	0a d0       	rcall	.+20     	; 0x2bbe <__divmodsi4_neg1>
    2baa:	00 1c       	adc	r0, r0
    2bac:	38 f4       	brcc	.+14     	; 0x2bbc <__divmodsi4_exit>

00002bae <__divmodsi4_neg2>:
    2bae:	50 95       	com	r21
    2bb0:	40 95       	com	r20
    2bb2:	30 95       	com	r19
    2bb4:	21 95       	neg	r18
    2bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb8:	4f 4f       	sbci	r20, 0xFF	; 255
    2bba:	5f 4f       	sbci	r21, 0xFF	; 255

00002bbc <__divmodsi4_exit>:
    2bbc:	08 95       	ret

00002bbe <__divmodsi4_neg1>:
    2bbe:	f6 f7       	brtc	.-4      	; 0x2bbc <__divmodsi4_exit>
    2bc0:	90 95       	com	r25
    2bc2:	80 95       	com	r24
    2bc4:	70 95       	com	r23
    2bc6:	61 95       	neg	r22
    2bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bca:	8f 4f       	sbci	r24, 0xFF	; 255
    2bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bce:	08 95       	ret

00002bd0 <__udivmodsi4>:
    2bd0:	a1 e2       	ldi	r26, 0x21	; 33
    2bd2:	1a 2e       	mov	r1, r26
    2bd4:	aa 1b       	sub	r26, r26
    2bd6:	bb 1b       	sub	r27, r27
    2bd8:	fd 01       	movw	r30, r26
    2bda:	0d c0       	rjmp	.+26     	; 0x2bf6 <__udivmodsi4_ep>

00002bdc <__udivmodsi4_loop>:
    2bdc:	aa 1f       	adc	r26, r26
    2bde:	bb 1f       	adc	r27, r27
    2be0:	ee 1f       	adc	r30, r30
    2be2:	ff 1f       	adc	r31, r31
    2be4:	a2 17       	cp	r26, r18
    2be6:	b3 07       	cpc	r27, r19
    2be8:	e4 07       	cpc	r30, r20
    2bea:	f5 07       	cpc	r31, r21
    2bec:	20 f0       	brcs	.+8      	; 0x2bf6 <__udivmodsi4_ep>
    2bee:	a2 1b       	sub	r26, r18
    2bf0:	b3 0b       	sbc	r27, r19
    2bf2:	e4 0b       	sbc	r30, r20
    2bf4:	f5 0b       	sbc	r31, r21

00002bf6 <__udivmodsi4_ep>:
    2bf6:	66 1f       	adc	r22, r22
    2bf8:	77 1f       	adc	r23, r23
    2bfa:	88 1f       	adc	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	1a 94       	dec	r1
    2c00:	69 f7       	brne	.-38     	; 0x2bdc <__udivmodsi4_loop>
    2c02:	60 95       	com	r22
    2c04:	70 95       	com	r23
    2c06:	80 95       	com	r24
    2c08:	90 95       	com	r25
    2c0a:	9b 01       	movw	r18, r22
    2c0c:	ac 01       	movw	r20, r24
    2c0e:	bd 01       	movw	r22, r26
    2c10:	cf 01       	movw	r24, r30
    2c12:	08 95       	ret

00002c14 <__prologue_saves__>:
    2c14:	2f 92       	push	r2
    2c16:	3f 92       	push	r3
    2c18:	4f 92       	push	r4
    2c1a:	5f 92       	push	r5
    2c1c:	6f 92       	push	r6
    2c1e:	7f 92       	push	r7
    2c20:	8f 92       	push	r8
    2c22:	9f 92       	push	r9
    2c24:	af 92       	push	r10
    2c26:	bf 92       	push	r11
    2c28:	cf 92       	push	r12
    2c2a:	df 92       	push	r13
    2c2c:	ef 92       	push	r14
    2c2e:	ff 92       	push	r15
    2c30:	0f 93       	push	r16
    2c32:	1f 93       	push	r17
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	ca 1b       	sub	r28, r26
    2c3e:	db 0b       	sbc	r29, r27
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	09 94       	ijmp

00002c4c <__epilogue_restores__>:
    2c4c:	2a 88       	ldd	r2, Y+18	; 0x12
    2c4e:	39 88       	ldd	r3, Y+17	; 0x11
    2c50:	48 88       	ldd	r4, Y+16	; 0x10
    2c52:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c54:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c56:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c58:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c5e:	b9 84       	ldd	r11, Y+9	; 0x09
    2c60:	c8 84       	ldd	r12, Y+8	; 0x08
    2c62:	df 80       	ldd	r13, Y+7	; 0x07
    2c64:	ee 80       	ldd	r14, Y+6	; 0x06
    2c66:	fd 80       	ldd	r15, Y+5	; 0x05
    2c68:	0c 81       	ldd	r16, Y+4	; 0x04
    2c6a:	1b 81       	ldd	r17, Y+3	; 0x03
    2c6c:	aa 81       	ldd	r26, Y+2	; 0x02
    2c6e:	b9 81       	ldd	r27, Y+1	; 0x01
    2c70:	ce 0f       	add	r28, r30
    2c72:	d1 1d       	adc	r29, r1
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	ed 01       	movw	r28, r26
    2c80:	08 95       	ret

00002c82 <_exit>:
    2c82:	f8 94       	cli

00002c84 <__stop_program>:
    2c84:	ff cf       	rjmp	.-2      	; 0x2c84 <__stop_program>
